-- 
-- Script was generated by Devart dbForge Studio 2022 for MySQL, Version 9.1.21.0
-- Product Home Page: http://www.devart.com/dbforge/mysql/studio
-- Script date 27/04/2024 7:35:12 SA
-- Source server version: 10.3.39
-- Source connection string: User Id=nvmanh;Host=35.197.137.85;Character Set=utf8
-- Target server version: 10.3.39
-- Target connection string: User Id=nvmanh;Host=35.197.137.85;Character Set=utf8
-- Run this script against `MS.Baza_Default` to synchronize it with `MS.HuyHuyen`
-- 

--
-- Disable foreign keys
--
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

SET NAMES 'utf8';

--
-- Set default database
--
USE `MS.Baza_Default`;

--
-- Create table `Organization`
--
CREATE TABLE Organization (
  OrganizationId CHAR(36) NOT NULL DEFAULT '',
  OrganizationCode VARCHAR(20) NOT NULL DEFAULT '',
  OrganizationName VARCHAR(255) NOT NULL DEFAULT '',
  OrganizationTypeName VARCHAR(255) DEFAULT NULL,
  ParentId CHAR(36) DEFAULT NULL,
  ShortDescription VARCHAR(255) DEFAULT NULL,
  Description VARCHAR(255) DEFAULT NULL,
  Address VARCHAR(255) DEFAULT NULL,
  PhoneNumber VARCHAR(255) DEFAULT NULL,
  Email VARCHAR(100) DEFAULT NULL,
  Level INT(11) DEFAULT NULL,
  Slogan VARCHAR(255) DEFAULT NULL,
  OwnerName VARCHAR(100) DEFAULT NULL,
  BusinessLicense VARCHAR(255) DEFAULT NULL,
  Website VARCHAR(255) DEFAULT NULL,
  IsConfirm BIT(1) NOT NULL DEFAULT b'0',
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(100) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(100) DEFAULT NULL,
  PRIMARY KEY (OrganizationId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Tổ chức, đơn vị';

--
-- Create index `UK_Organization_OrganizationCode` on table `Organization`
--
ALTER TABLE Organization 
  ADD UNIQUE INDEX UK_Organization_OrganizationCode(OrganizationCode);

--
-- Create foreign key
--
ALTER TABLE Organization 
  ADD CONSTRAINT FK_Organization_ParentId FOREIGN KEY (ParentId)
    REFERENCES Organization(OrganizationId) ON DELETE NO ACTION;

--
-- Create table `Unit`
--
CREATE TABLE Unit (
  UnitId CHAR(36) NOT NULL DEFAULT '',
  UnitCode VARCHAR(20) DEFAULT '',
  UnitName VARCHAR(255) NOT NULL DEFAULT '',
  Description VARCHAR(255) DEFAULT NULL,
  IsSystem BIT(1) DEFAULT b'0',
  OrganizationId CHAR(36) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(100) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(100) DEFAULT NULL,
  PRIMARY KEY (UnitId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Đơn vị tính';

--
-- Create foreign key
--
ALTER TABLE Unit 
  ADD CONSTRAINT FK_Unit_OrganizationId FOREIGN KEY (OrganizationId)
    REFERENCES Organization(OrganizationId) ON DELETE NO ACTION;

--
-- Create table `ServiceGroup`
--
CREATE TABLE ServiceGroup (
  ServiceGroupId CHAR(36) NOT NULL DEFAULT '',
  ServiceGroupName VARCHAR(255) NOT NULL DEFAULT '',
  Description VARCHAR(255) DEFAULT NULL,
  OrganizationId CHAR(36) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (ServiceGroupId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Nhóm dịch vụ';

--
-- Create foreign key
--
ALTER TABLE ServiceGroup 
  ADD CONSTRAINT FK_ServiceGroup_OrganizationId FOREIGN KEY (OrganizationId)
    REFERENCES Organization(OrganizationId) ON DELETE NO ACTION;

--
-- Create table `Service`
--
CREATE TABLE Service (
  ServiceId CHAR(36) NOT NULL DEFAULT '',
  ServiceCode VARCHAR(20) DEFAULT '',
  ServiceName VARCHAR(255) NOT NULL DEFAULT '' COMMENT 'Tên dịch vụ',
  Description VARCHAR(255) DEFAULT NULL COMMENT 'Mô tả',
  ChargeType INT(11) NOT NULL DEFAULT 0 COMMENT 'Kiểu tính tiền(0- mặc định, 1- theo phút, 2- gờ, 3- ngày, 4- tháng, 5- năm)',
  UnitTime DECIMAL(18, 2) NOT NULL DEFAULT 0.00,
  UnitPrice DECIMAL(18, 2) DEFAULT NULL COMMENT 'Giá dịch vụ',
  CostPrice DECIMAL(18, 2) DEFAULT NULL,
  ServiceGroupId CHAR(36) DEFAULT NULL,
  ImgPath VARCHAR(255) DEFAULT NULL,
  UnitId CHAR(36) DEFAULT NULL,
  OrganizationId CHAR(36) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (ServiceId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Dịch vụ';

--
-- Create index `IDX_Service_ServiceName` on table `Service`
--
ALTER TABLE Service 
  ADD INDEX IDX_Service_ServiceName(ServiceName);

--
-- Create foreign key
--
ALTER TABLE Service 
  ADD CONSTRAINT FK_Service_OrganizationId FOREIGN KEY (OrganizationId)
    REFERENCES Organization(OrganizationId) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE Service 
  ADD CONSTRAINT FK_Service_ServiceGroupId FOREIGN KEY (ServiceGroupId)
    REFERENCES ServiceGroup(ServiceGroupId) ON DELETE NO ACTION;

--
-- Create view `Views_Service`
--
CREATE 
VIEW Views_Service
AS
	SELECT
	  `s`.`ServiceId` AS `ServiceId`,
	  `s`.`ServiceCode` AS `ServiceCode`,
	  `s`.`ServiceName` AS `ServiceName`,
	  `s`.`Description` AS `Description`,
	  `s`.`ChargeType` AS `BilledByHours`,
	  `s`.`UnitPrice` AS `UnitPrice`,
	  `s`.`CostPrice` AS `CostPrice`,
	  `s`.`ServiceGroupId` AS `ServiceGroupId`,
	  `s`.`ImgPath` AS `ImgPath`,
	  `s`.`OrganizationId` AS `OrganizationId`,
	  `sg`.`ServiceGroupName` AS `ServiceGroupName`,
	  `s`.`CreatedDate` AS `CreatedDate`,
	  `s`.`CreatedBy` AS `CreatedBy`,
	  `s`.`ModifiedDate` AS `ModifiedDate`,
	  `s`.`ModifiedBy` AS `ModifiedBy`
	FROM (`Service` `s`
	  LEFT JOIN `ServiceGroup` `sg`
	    ON (`s`.`ServiceGroupId` = `sg`.`ServiceGroupId`));

--
-- Create table `Report`
--
CREATE TABLE Report (
  ReportId CHAR(36) NOT NULL,
  ReportCode VARCHAR(20) NOT NULL,
  ReportName VARCHAR(255) NOT NULL,
  ReportType INT(11) DEFAULT NULL,
  Description VARCHAR(255) DEFAULT NULL,
  OrganizationId CHAR(36) DEFAULT NULL,
  IsSystem BIT(1) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (ReportId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE Report 
  ADD CONSTRAINT FK_Report_OrganizationId FOREIGN KEY (OrganizationId)
    REFERENCES Organization(OrganizationId) ON DELETE NO ACTION;

--
-- Create table `Ref`
--
CREATE TABLE Ref (
  RefId CHAR(36) NOT NULL DEFAULT '',
  RefNo VARCHAR(50) NOT NULL DEFAULT '',
  RefDate DATETIME NOT NULL,
  RefType INT(11) DEFAULT NULL,
  BranchId CHAR(36) DEFAULT NULL COMMENT 'Chi nhánh nhập',
  SlotId CHAR(36) DEFAULT NULL,
  EmployeeId CHAR(36) DEFAULT NULL,
  CreateInvoiceDate DATETIME DEFAULT NULL,
  PaymentType INT(11) DEFAULT NULL,
  PaymentStatus VARCHAR(255) NOT NULL DEFAULT '1',
  CustomerId CHAR(36) DEFAULT NULL,
  CustomerName VARCHAR(100) DEFAULT NULL,
  CustomerAddress VARCHAR(255) DEFAULT NULL,
  AccountObjectId CHAR(36) DEFAULT NULL,
  AccountObjectName VARCHAR(255) DEFAULT NULL COMMENT 'Tên đối tượng/ đối tác',
  ContactPhoneNumber VARCHAR(50) DEFAULT NULL COMMENT 'Số điện thoại liên hệ',
  ContactName VARCHAR(100) DEFAULT NULL COMMENT 'Tên người liên hệ',
  JournalMemo VARCHAR(255) DEFAULT NULL COMMENT 'Diễn giải nhập',
  TotalAmount DECIMAL(18, 4) NOT NULL DEFAULT 0.0000,
  ActualReceiveAmount DECIMAL(18, 4) NOT NULL DEFAULT 0.0000,
  ChangeAmount DECIMAL(18, 4) DEFAULT NULL,
  OrganizationId CHAR(36) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (RefId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Phiếu nhập/xuất';

--
-- Create foreign key
--
ALTER TABLE Ref 
  ADD CONSTRAINT FK_Ref_OrganizationId FOREIGN KEY (OrganizationId)
    REFERENCES Organization(OrganizationId) ON DELETE NO ACTION;

DELIMITER $$

--
-- Create trigger `TG_RefBeforeInsert`
--
CREATE TRIGGER TG_RefBeforeInsert
	BEFORE INSERT
	ON Ref
	FOR EACH ROW
BEGIN
  SET @currentDate = CURDATE();
  SET @day = CAST(DAY(@currentDate) AS int);
  SET @month = MONTH(@currentDate);
  SET @year = SUBSTRING(YEAR(@currentDate), 3);
  SET @dayString = '';


  IF (@day < 10) THEN
    SET @day = CONCAT('0', @day);
  END IF;

  IF (@month < 10) THEN
    SET @month = CONCAT('0', @month);
  END IF;


  SET @preFix = CONCAT(@year, @month, @day);

  SET @LAST_CODE = (SELECT
      MAX(r.RefNo)
    FROM Ref r
    WHERE RefNo LIKE CONCAT(@preFix, '%') AND OrganizationId = NEW.OrganizationId);

  IF @LAST_CODE IS NULL THEN
    SET NEW.RefNo =
    CONCAT(@preFix, '0001');
  ELSE
    SET NEW.RefNo = (CAST(@LAST_CODE AS int) + 1);
  END IF;
END
$$

--
-- Create procedure `Proc_Statistic_GetOrgStatisticByDay`
--
CREATE PROCEDURE Proc_Statistic_GetOrgStatisticByDay(IN p_Date datetime)
BEGIN
  set @p_Date = p_Date;
  
  CREATE TEMPORARY TABLE IF NOT EXISTS tbStatistic AS
  SELECT SUM(1) AS TotalInvoice,
       SUM(IFNULL(i.TotalAmount,0)) AS TotalMoney,
       i.OrganizationId,
       @p_Date AS InvoiceDate
    FROM Ref i
       WHERE date(i.InvoiceDate) =  date(@p_Date) GROUP BY i.OrganizationId;


  SELECT  o.OrganizationId,
          o.OrganizationCode, 
          o.OrganizationName, 
          o.Email, 
          IFNULL(s.TotalInvoice,0) AS TotalInvoice,
          IFNULL(s.TotalMoney,0) AS TotalMoney,
          p_Date AS InvoiceDate 
  FROM  Organization o 
    LEFT JOIN tbStatistic s ON o.OrganizationId = s.OrganizationId;

DROP TEMPORARY TABLE IF EXISTS tbStatistic;
END
$$

--
-- Create procedure `Proc_Ref_GetNewRefNo`
--
CREATE PROCEDURE Proc_Ref_GetNewRefNo(IN p_organizationId char(36), IN p_refType int)
BEGIN
  SET @currentDate = CURDATE();
  SET @day = CAST(DAY(@currentDate) AS int);
  SET @month = MONTH(@currentDate);
  SET @year = SUBSTRING(YEAR(@currentDate), 3);
  SET @dayString = '';


  IF (@day < 10) THEN
    SET @day = CONCAT('0', @day);
  END IF;

  IF (@month < 10) THEN
    SET @month = CONCAT('0', @month);
  END IF;


  SET @preFix = CONCAT(@year, @month, @day);

  SET @LAST_CODE = (SELECT
      MAX(r.RefNo)
    FROM Ref r
    WHERE RefNo LIKE CONCAT(@preFix, '%'));

  IF @LAST_CODE IS NULL THEN
    SELECT
      CONCAT(@preFix, '0001');
  ELSE
    SELECT
      CAST(@LAST_CODE AS int) + 1;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `ServiceInvoice`
--
CREATE TABLE ServiceInvoice (
  ServiceInvoiceId CHAR(36) NOT NULL,
  RefId CHAR(36) NOT NULL,
  ServiceId CHAR(36) NOT NULL,
  UnitTime DECIMAL(18, 2) NOT NULL DEFAULT 0.00,
  ChargeType INT(11) NOT NULL DEFAULT 0,
  CostPrice DECIMAL(18, 2) NOT NULL DEFAULT 0.00,
  UnitPrice DECIMAL(18, 2) NOT NULL DEFAULT 0.00,
  Quantity INT(11) DEFAULT NULL COMMENT 'Số lượng',
  TimeStart DATETIME DEFAULT NULL,
  TimeEnd DATETIME DEFAULT NULL,
  TotalTime DECIMAL(18, 2) DEFAULT NULL,
  TotalAmount VARCHAR(255) DEFAULT NULL,
  Description VARCHAR(255) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (ServiceInvoiceId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Chi tiết hóa đơn sử dụng dịch vụ';

--
-- Create foreign key
--
ALTER TABLE ServiceInvoice 
  ADD CONSTRAINT FK_ServiceInvoice_RefId FOREIGN KEY (RefId)
    REFERENCES Ref(RefId) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE ServiceInvoice 
  ADD CONSTRAINT FK_ServiceInvoice_ServiceId FOREIGN KEY (ServiceId)
    REFERENCES Service(ServiceId) ON DELETE NO ACTION;

--
-- Create view `View_ServiceInvoice`
--
CREATE 
VIEW View_ServiceInvoice
AS
	SELECT
	  `si`.`ServiceInvoiceId` AS `ServiceInvoiceId`,
	  `si`.`RefId` AS `RefId`,
	  `si`.`ServiceId` AS `ServiceId`,
	  `si`.`ChargeType` AS `BilledByHours`,
	  `si`.`UnitPrice` AS `PriceByHour`,
	  `si`.`Quantity` AS `Quantity`,
	  `si`.`TimeStart` AS `TimeStart`,
	  `si`.`TimeEnd` AS `TimeEnd`,
	  `si`.`TotalTime` AS `TotalTime`,
	  `si`.`TotalAmount` AS `TotalAmount`,
	  `si`.`Description` AS `Description`,
	  `si`.`CreatedDate` AS `CreatedDate`,
	  `si`.`CreatedBy` AS `CreatedBy`,
	  `si`.`ModifiedDate` AS `ModifiedDate`,
	  `si`.`ModifiedBy` AS `ModifiedBy`,
	  `s`.`ServiceCode` AS `ServiceCode`,
	  `s`.`ServiceName` AS `ServiceName`,
	  `s`.`ServiceGroupId` AS `ServiceGroupId`,
	  `s`.`ImgPath` AS `ImgPath`,
	  `s`.`OrganizationId` AS `OrganizationId`
	FROM (`ServiceInvoice` `si`
	  LEFT JOIN `Service` `s`
	    ON (`si`.`ServiceId` = `s`.`ServiceId`));

--
-- Create table `MSLicense`
--
CREATE TABLE MSLicense (
  MSLicenseId CHAR(36) NOT NULL DEFAULT '',
  MSLicenseCode VARCHAR(255) DEFAULT NULL,
  OrganizationId CHAR(36) DEFAULT NULL,
  LicenseType INT(11) DEFAULT NULL COMMENT 'Loại giấy phép(1- giấy phép đầy đủ; 2- Dùng thử)',
  StartDate DATETIME DEFAULT NULL,
  ExpiredDate DATETIME DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (MSLicenseId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE MSLicense 
  ADD CONSTRAINT FK_MSLicense_OrganizationId FOREIGN KEY (OrganizationId)
    REFERENCES Organization(OrganizationId) ON DELETE NO ACTION;

--
-- Create table `GroupProduct`
--
CREATE TABLE GroupProduct (
  GroupProductId CHAR(36) NOT NULL DEFAULT '',
  GroupProductName VARCHAR(255) DEFAULT NULL,
  OrganizationId CHAR(36) DEFAULT NULL,
  ParentId CHAR(36) DEFAULT NULL,
  IsSystem BIT(1) DEFAULT b'0',
  Description VARCHAR(255) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(100) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(100) DEFAULT NULL,
  PRIMARY KEY (GroupProductId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Nhóm sản phẩm';

--
-- Create foreign key
--
ALTER TABLE GroupProduct 
  ADD CONSTRAINT FK_GroupProduct_OrganizationId FOREIGN KEY (OrganizationId)
    REFERENCES Organization(OrganizationId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE GroupProduct 
  ADD CONSTRAINT FK_GroupProduct_ParentId FOREIGN KEY (ParentId)
    REFERENCES GroupProduct(GroupProductId) ON DELETE NO ACTION;

--
-- Create table `Product`
--
CREATE TABLE Product (
  ProductId CHAR(36) NOT NULL DEFAULT '',
  ProductCode VARCHAR(20) DEFAULT '',
  ProductName VARCHAR(255) NOT NULL DEFAULT '',
  UnitId CHAR(36) NOT NULL DEFAULT '',
  UnitPrice DECIMAL(18, 4) NOT NULL DEFAULT 0.0000,
  Description VARCHAR(255) DEFAULT NULL,
  Imgs VARCHAR(255) DEFAULT NULL,
  GroupProductId CHAR(36) DEFAULT NULL,
  OrganizationId CHAR(36) NOT NULL DEFAULT '',
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(100) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(100) DEFAULT NULL,
  PRIMARY KEY (ProductId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE Product 
  ADD CONSTRAINT FK_Product_GroupProductId FOREIGN KEY (GroupProductId)
    REFERENCES GroupProduct(GroupProductId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE Product 
  ADD CONSTRAINT FK_Product_OrganizationId FOREIGN KEY (OrganizationId)
    REFERENCES Organization(OrganizationId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE Product 
  ADD CONSTRAINT FK_Product_UnitId FOREIGN KEY (UnitId)
    REFERENCES Unit(UnitId) ON DELETE NO ACTION;

DELIMITER $$

--
-- Create procedure `Proc_Products_GetProductForSale`
--
CREATE PROCEDURE Proc_Products_GetProductForSale(IN p_Organization CHAR(36))
BEGIN
  SELECT p.ProductId,
         p.ProductCode,
         p.ProductName,
         p.UnitId,
         p.UnitPrice,
         p.Description,
         p.Imgs,
         p.GroupProductId,
         p.OrganizationId,
         p.CreatedDate,
         p.CreatedBy,
         p.ModifiedDate,
         p.ModifiedBy 
   FROM Product p 
   WHERE OrganizationId = p_Organization;
END
$$

DELIMITER ;

--
-- Create table `EmployeePosition`
--
CREATE TABLE EmployeePosition (
  PositionId CHAR(36) NOT NULL DEFAULT '',
  PositionName VARCHAR(255) NOT NULL DEFAULT '',
  IsSystem BIT(1) DEFAULT b'0',
  Description VARCHAR(255) DEFAULT NULL,
  OrganizationId CHAR(36) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (PositionId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Vị trí, chức vụ';

--
-- Create foreign key
--
ALTER TABLE EmployeePosition 
  ADD CONSTRAINT FK_EmployeePosition_OrganizationId FOREIGN KEY (OrganizationId)
    REFERENCES Organization(OrganizationId) ON DELETE NO ACTION;

--
-- Create table `Employee`
--
CREATE TABLE Employee (
  EmployeeId CHAR(36) NOT NULL DEFAULT '',
  EmployeeCode VARCHAR(20) DEFAULT '',
  FirstName VARCHAR(255) DEFAULT NULL,
  LastName VARCHAR(255) DEFAULT NULL,
  FullName VARCHAR(255) NOT NULL DEFAULT '',
  DateOfBirth DATE DEFAULT NULL,
  Gender INT(11) DEFAULT NULL,
  Mobile VARCHAR(50) DEFAULT NULL,
  BankAccountNumber VARCHAR(255) DEFAULT NULL,
  BankName VARCHAR(255) DEFAULT NULL,
  BankBranchName VARCHAR(255) DEFAULT NULL,
  Email VARCHAR(100) DEFAULT NULL,
  AvatarLink VARCHAR(255) DEFAULT NULL,
  Address VARCHAR(255) DEFAULT NULL,
  IdentityNumber VARCHAR(255) DEFAULT NULL,
  JoinDate DATE DEFAULT NULL,
  Salary DECIMAL(10, 0) DEFAULT 0,
  WorkStatus INT(11) DEFAULT NULL,
  Note VARCHAR(255) DEFAULT NULL,
  PositionId CHAR(36) DEFAULT NULL,
  OrganizationId CHAR(36) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (EmployeeId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Nhân viên';

--
-- Create index `IDX_Employee_FullName` on table `Employee`
--
ALTER TABLE Employee 
  ADD INDEX IDX_Employee_FullName(FullName);

--
-- Create foreign key
--
ALTER TABLE Employee 
  ADD CONSTRAINT FK_Employee_OrganizationId FOREIGN KEY (OrganizationId)
    REFERENCES Organization(OrganizationId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE Employee 
  ADD CONSTRAINT FK_Employee_PositionId FOREIGN KEY (PositionId)
    REFERENCES EmployeePosition(PositionId) ON DELETE NO ACTION;

DELIMITER $$

--
-- Create trigger `TG_Employee_BeforeInsert`
--
CREATE TRIGGER TG_Employee_BeforeInsert
	BEFORE INSERT
	ON Employee
	FOR EACH ROW
BEGIN
  IF NEW.EmployeeId IS NULL OR NEW.EmployeeId = '' THEN
  SET NEW.EmployeeId = UUID();
  END IF;
   IF NEW.CreatedDate IS NULL THEN
  SET NEW.CreatedDate = CURRENT_TIMESTAMP();
  END IF;
END
$$

--
-- Create procedure `Proc_Ref_GetRefById`
--
CREATE PROCEDURE Proc_Ref_GetRefById(IN p_organizationId CHAR(36), IN p_refId CHAR(36))
BEGIN
    SELECT r.*,
  e.EmployeeCode,
  e.FullName AS EmployeeName
  FROM Ref r
  LEFT JOIN Employee e ON r.EmployeeID = e.EmployeeId
  LEFT JOIN Organization o ON r.OrganizationId = o.OrganizationId
  WHERE r.RefId = p_refId AND r.OrganizationId = p_organizationId;
END
$$

DELIMITER ;

--
-- Create view `View_Employee`
--
CREATE 
VIEW View_Employee
AS
	SELECT
	  `e`.`EmployeeId` AS `EmployeeId`,
	  `e`.`EmployeeCode` AS `EmployeeCode`,
	  `e`.`FirstName` AS `FirstName`,
	  `e`.`LastName` AS `LastName`,
	  `e`.`FullName` AS `FullName`,
	  `e`.`DateOfBirth` AS `DateOfBirth`,
	  `e`.`Gender` AS `Gender`,
	  `e`.`Mobile` AS `Mobile`,
	  `e`.`BankAccountNumber` AS `BankAccountNumber`,
	  `e`.`BankName` AS `BankName`,
	  `e`.`BankBranchName` AS `BankBranchName`,
	  `e`.`Email` AS `Email`,
	  `e`.`Address` AS `Address`,
	  `e`.`IdentityNumber` AS `IdentityNumber`,
	  `e`.`JoinDate` AS `JoinDate`,
	  `e`.`Salary` AS `Salary`,
	  `e`.`WorkStatus` AS `WorkStatus`,
	  `e`.`Note` AS `Note`,
	  `e`.`PositionId` AS `PositionId`,
	  `e`.`CreatedDate` AS `CreatedDate`,
	  `e`.`ModifiedDate` AS `ModifiedDate`,
	  `e`.`CreatedBy` AS `CreatedBy`,
	  `e`.`ModifiedBy` AS `ModifiedBy`,
	  `ep`.`PositionName` AS `PositionName`
	FROM (`Employee` `e`
	  LEFT JOIN `EmployeePosition` `ep`
	    ON (`e`.`PositionId` = `ep`.`PositionId`));

DELIMITER $$

--
-- Create procedure `Proc_GetEmployees`
--
CREATE PROCEDURE Proc_GetEmployees()
BEGIN
  SELECT * FROM View_Employee;
END
$$

DELIMITER ;

--
-- Create table `User`
--
CREATE TABLE User (
  UserId CHAR(36) NOT NULL COMMENT 'TRIAL',
  Email VARCHAR(256) DEFAULT NULL COMMENT 'TRIAL',
  EmailConfirmed TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'TRIAL',
  PasswordHash LONGTEXT DEFAULT NULL COMMENT 'TRIAL',
  SecurityStamp LONGTEXT DEFAULT NULL COMMENT 'TRIAL',
  PhoneNumber LONGTEXT DEFAULT NULL COMMENT 'TRIAL',
  PhoneNumberConfirmed TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'TRIAL',
  TwoFactorEnabled TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'TRIAL',
  LockoutEndDateUtc DATETIME(3) DEFAULT NULL COMMENT 'TRIAL',
  LockoutEnabled TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'TRIAL',
  AccessFailedCount INT(11) NOT NULL DEFAULT 0 COMMENT 'TRIAL',
  UserName VARCHAR(256) NOT NULL COMMENT 'TRIAL',
  OrganizationId CHAR(36) DEFAULT NULL,
  EmployeeId CHAR(36) DEFAULT NULL,
  RefreshToken VARCHAR(255) DEFAULT NULL,
  RefreshTokenExpiryTime DATETIME DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(100) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (UserId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'TRIAL';

--
-- Create index `UserNameIndex` on table `User`
--
ALTER TABLE User 
  ADD UNIQUE INDEX UserNameIndex(UserName(255));

--
-- Create index `FK_User_ContactId` on table `User`
--
ALTER TABLE User 
  ADD INDEX FK_User_ContactId(EmployeeId);

--
-- Create foreign key
--
ALTER TABLE User 
  ADD CONSTRAINT FK_User_EmployeeId FOREIGN KEY (EmployeeId)
    REFERENCES Employee(EmployeeId) ON DELETE NO ACTION;

--
-- Create table `UserLogin`
--
CREATE TABLE UserLogin (
  LoginProvider VARCHAR(128) NOT NULL COMMENT 'TRIAL',
  ProviderKey VARCHAR(128) NOT NULL COMMENT 'TRIAL',
  UserId VARCHAR(128) NOT NULL COMMENT 'TRIAL',
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(100) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(100) DEFAULT NULL,
  PRIMARY KEY (LoginProvider, ProviderKey, UserId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'TRIAL';

--
-- Create index `IX_UserId` on table `UserLogin`
--
ALTER TABLE UserLogin 
  ADD INDEX IX_UserId(UserId);

--
-- Create foreign key
--
ALTER TABLE UserLogin 
  ADD CONSTRAINT FK_UserLogin_UserId FOREIGN KEY (UserId)
    REFERENCES User(UserId) ON DELETE NO ACTION;

--
-- Create table `UserClaim`
--
CREATE TABLE UserClaim (
  UserClaimId CHAR(36) NOT NULL COMMENT 'TRIAL',
  UserId CHAR(36) NOT NULL COMMENT 'TRIAL',
  ClaimType LONGTEXT DEFAULT NULL COMMENT 'TRIAL',
  ClaimValue LONGTEXT DEFAULT NULL COMMENT 'TRIAL',
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(100) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(100) DEFAULT NULL,
  PRIMARY KEY (UserClaimId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'TRIAL';

--
-- Create index `IX_UserId` on table `UserClaim`
--
ALTER TABLE UserClaim 
  ADD INDEX IX_UserId(UserId);

--
-- Create foreign key
--
ALTER TABLE UserClaim 
  ADD CONSTRAINT FK_UserClaim_UserId FOREIGN KEY (UserId)
    REFERENCES User(UserId) ON DELETE NO ACTION;

--
-- Create table `Note`
--
CREATE TABLE Note (
  NoteId CHAR(36) NOT NULL,
  NoteDateTime DATETIME DEFAULT NULL,
  Content TEXT DEFAULT NULL,
  UserId CHAR(36) DEFAULT NULL,
  OrganizationId CHAR(36) DEFAULT NULL,
  ThemeColor VARCHAR(255) DEFAULT NULL,
  OrderZIndex INT(11) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (NoteId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Ghi chú';

--
-- Create index `FK_Note_EmployeeId` on table `Note`
--
ALTER TABLE Note 
  ADD INDEX FK_Note_EmployeeId(UserId);

--
-- Create foreign key
--
ALTER TABLE Note 
  ADD CONSTRAINT FK_Note_OrganizationId FOREIGN KEY (OrganizationId)
    REFERENCES Organization(OrganizationId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE Note 
  ADD CONSTRAINT FK_Note_UserId FOREIGN KEY (UserId)
    REFERENCES User(UserId) ON DELETE NO ACTION;

--
-- Create table `CustomerGroup`
--
CREATE TABLE CustomerGroup (
  CustomerGroupId CHAR(36) NOT NULL DEFAULT '',
  CustomerGroupName VARCHAR(255) NOT NULL DEFAULT '',
  Description VARCHAR(255) DEFAULT NULL,
  OrganizationId CHAR(36) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (CustomerGroupId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Nhóm khách hàng';

--
-- Create foreign key
--
ALTER TABLE CustomerGroup 
  ADD CONSTRAINT FK_CustomerGroup_OrganizationId FOREIGN KEY (OrganizationId)
    REFERENCES Organization(OrganizationId) ON DELETE NO ACTION;

--
-- Create table `Customer`
--
CREATE TABLE Customer (
  CustomerId CHAR(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  CustomerCode VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT '',
  FullName VARCHAR(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT '',
  Gender INT(11) DEFAULT NULL,
  Mobile VARCHAR(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  Email VARCHAR(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  Address VARCHAR(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  CustomerGroupId CHAR(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  OrganizationId CHAR(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  DateOfBirth DATE DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  ModifiedBy VARCHAR(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (CustomerId)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci,
COMMENT = 'Khách hàng';

--
-- Create index `IDX_Customer_FullName` on table `Customer`
--
ALTER TABLE Customer 
  ADD INDEX IDX_Customer_FullName(FullName);

--
-- Create foreign key
--
ALTER TABLE Customer 
  ADD CONSTRAINT FK_Customer_CustomerGroupId FOREIGN KEY (CustomerGroupId)
    REFERENCES CustomerGroup(CustomerGroupId) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE Customer 
  ADD CONSTRAINT FK_Customer_OrganizationId FOREIGN KEY (OrganizationId)
    REFERENCES Organization(OrganizationId) ON DELETE NO ACTION;

--
-- Create view `View_Customer`
--
CREATE 
VIEW View_Customer
AS
	SELECT
	  `c`.`CustomerId` AS `CustomerId`,
	  `c`.`CustomerCode` AS `CustomerCode`,
	  `c`.`FullName` AS `FullName`,
	  `c`.`Gender` AS `Gender`,
	  `c`.`Mobile` AS `Mobile`,
	  `c`.`Email` AS `Email`,
	  `c`.`Address` AS `Address`,
	  `c`.`CustomerGroupId` AS `CustomerGroupId`,
	  `c`.`DateOfBirth` AS `DateOfBirth`,
	  `c`.`CreatedDate` AS `CreatedDate`,
	  `c`.`ModifiedDate` AS `ModifiedDate`,
	  `c`.`CreatedBy` AS `CreatedBy`,
	  `c`.`ModifiedBy` AS `ModifiedBy`,
	  `cg`.`CustomerGroupName` AS `CustomerGroupName`
	FROM (`Customer` `c`
	  LEFT JOIN `CustomerGroup` `cg`
	    ON (`c`.`CustomerGroupId` = `cg`.`CustomerGroupId`));

DELIMITER $$

--
-- Create procedure `Proc_GetCustomers`
--
CREATE PROCEDURE Proc_GetCustomers()
BEGIN
  SELECT * FROM View_Customer vc;
END
$$

DELIMITER ;

--
-- Create table `Invoice`
--
CREATE TABLE Invoice (
  InvoiceId CHAR(36) NOT NULL DEFAULT '',
  InvoiceCode VARCHAR(20) NOT NULL DEFAULT '',
  InvoiceDate DATETIME NOT NULL DEFAULT current_timestamp,
  InvoiceStatus INT(11) NOT NULL DEFAULT 0 COMMENT '0 - chưa thanh toán; 1- đã thanh toán; 2- không phải thanh toán; - 3-  nháp; 4- hóa đơn bị hủy/ xóa',
  EmployeeId CHAR(36) NOT NULL DEFAULT '' COMMENT 'Nhân viên lập hóa đơn',
  CustomerId CHAR(36) DEFAULT NULL COMMENT 'Khách hàng',
  CustomerName VARCHAR(100) DEFAULT NULL,
  CustomerAddress VARCHAR(255) DEFAULT NULL,
  TotalMoney DECIMAL(18, 2) DEFAULT NULL,
  Description VARCHAR(255) DEFAULT NULL,
  OrganizationId CHAR(36) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (InvoiceId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Hóa đơn';

--
-- Create index `UK_Invoice_InvoiceCode` on table `Invoice`
--
ALTER TABLE Invoice 
  ADD INDEX UK_Invoice_InvoiceCode(InvoiceCode);

--
-- Create foreign key
--
ALTER TABLE Invoice 
  ADD CONSTRAINT FK_Invoice_CustomerId FOREIGN KEY (CustomerId)
    REFERENCES Customer(CustomerId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE Invoice 
  ADD CONSTRAINT FK_Invoice_EmployeeId FOREIGN KEY (EmployeeId)
    REFERENCES Employee(EmployeeId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE Invoice 
  ADD CONSTRAINT FK_Invoice_OrganizationId FOREIGN KEY (OrganizationId)
    REFERENCES Organization(OrganizationId) ON DELETE NO ACTION;

DELIMITER $$

--
-- Create procedure `Proc_Statistic_GetOrgStatisticYesterday`
--
CREATE PROCEDURE Proc_Statistic_GetOrgStatisticYesterday()
BEGIN
 SELECT SUM(1) AS TotalInvoice,
       SUM(IFNULL(i.TotalMoney,0)) AS TotalMoney,
       i.OrganizationId,
       o.OrganizationName,
       o.Email,
       ADDDATE(CURDATE(),-1) AS InvoiceDate
    FROM Invoice i
       LEFT JOIN Organization o ON i.OrganizationId = o.OrganizationId 
       WHERE date(i.InvoiceDate) =  ADDDATE(CURDATE(),-1) GROUP BY i.OrganizationId;
END
$$

--
-- Create procedure `Proc_Statistic_GetOrgStatisticByDay_V1`
--
CREATE PROCEDURE Proc_Statistic_GetOrgStatisticByDay_V1(IN p_Date VARCHAR(255))
BEGIN
set @p_Date = p_Date;
  
  CREATE TEMPORARY TABLE IF NOT EXISTS tbStatistic AS
  SELECT SUM(1) AS TotalInvoice,
       SUM(IFNULL(i.TotalMoney,0)) AS TotalMoney,
       i.OrganizationId,
       @p_Date AS InvoiceDate
    FROM Invoice i
       WHERE date(i.InvoiceDate) =  date(@p_Date) GROUP BY i.OrganizationId;


  SELECT  o.OrganizationId,
          o.OrganizationCode, 
          o.OrganizationName, 
          o.Email, 
          IFNULL(s.TotalInvoice,0) AS TotalInvoice,
          IFNULL(s.TotalMoney,0) AS TotalMoney,
          p_Date AS InvoiceDate 
  FROM  Organization o 
    LEFT JOIN tbStatistic s ON o.OrganizationId = s.OrganizationId;

DROP TEMPORARY TABLE IF EXISTS tbStatistic;
END
$$

--
-- Create procedure `Proc_GetOrganizationInfoByUserID`
--
CREATE PROCEDURE Proc_GetOrganizationInfoByUserID(IN p_UserId CHAR(36), IN p_OrganizationId VARCHAR(255))
BEGIN
  set @Month =  MONTH(CURRENT_DATE());
  set @Year = YEAR(CURRENT_DATE());

  -- Lấy thông tin doanh thu tháng hiện tại:
  CREATE TEMPORARY TABLE IF NOT EXISTS tbInvoice AS
  (SELECT i.OrganizationId, COUNT(i.InvoiceId) AS TotalInvoices, SUM(IFNULL(i.TotalMoney,0)) AS TotalMoneys FROM Invoice i WHERE OrganizationId = p_OrganizationId AND MONTH(i.InvoiceDate) = @Month AND YEAR(i.InvoiceDate) = @Year GROUP BY i.OrganizationId);
  
   SELECT o.*,IFNULL(i.TotalInvoices,0) AS TotalInvoices,IFNULL(i.TotalMoneys,0) AS TotalMoneys FROM Organization o LEFT JOIN tbInvoice i ON o.OrganizationId = i.OrganizationId WHERE o.OrganizationId = p_OrganizationId;

   DROP TEMPORARY TABLE IF EXISTS tbInvoice;
END
$$

DELIMITER ;

--
-- Create table `InvoiceDetail`
--
CREATE TABLE InvoiceDetail (
  InvoiceDetailId CHAR(36) NOT NULL DEFAULT '',
  InvoiceId CHAR(36) NOT NULL DEFAULT '' COMMENT 'Thuộc hóa đơn nào',
  ServiceId CHAR(36) DEFAULT NULL COMMENT 'Dịch vụ nào',
  ProductId CHAR(36) DEFAULT NULL,
  UnitPrice DECIMAL(18, 2) NOT NULL DEFAULT 0.00 COMMENT 'Đơn giá',
  Quantity DECIMAL(18, 2) DEFAULT NULL COMMENT 'Số lượng',
  TotalMoney DECIMAL(18, 2) DEFAULT NULL,
  Note VARCHAR(255) DEFAULT NULL,
  EmployeeId CHAR(36) DEFAULT NULL COMMENT 'Nhân viên thực hiện',
  StartDate DATETIME DEFAULT NULL COMMENT 'Giờ bắt đầu làm',
  EndDate DATETIME DEFAULT NULL COMMENT 'Giờ làm xong',
  OrganizationId CHAR(36) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(100) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(100) DEFAULT NULL,
  PRIMARY KEY (InvoiceDetailId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Chi tiết hóa đơn';

--
-- Create foreign key
--
ALTER TABLE InvoiceDetail 
  ADD CONSTRAINT FK_InvoiceDetail_EmployeeId FOREIGN KEY (EmployeeId)
    REFERENCES Employee(EmployeeId) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE InvoiceDetail 
  ADD CONSTRAINT FK_InvoiceDetail_InvoiceId FOREIGN KEY (InvoiceId)
    REFERENCES Invoice(InvoiceId) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE InvoiceDetail 
  ADD CONSTRAINT FK_InvoiceDetail_OrganizationId FOREIGN KEY (OrganizationId)
    REFERENCES Organization(OrganizationId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE InvoiceDetail 
  ADD CONSTRAINT FK_InvoiceDetail_ProductId FOREIGN KEY (ProductId)
    REFERENCES Product(ProductId) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE InvoiceDetail 
  ADD CONSTRAINT FK_InvoiceDetail_ServiceId FOREIGN KEY (ServiceId)
    REFERENCES Service(ServiceId) ON DELETE CASCADE;

DELIMITER $$

--
-- Create trigger `TG_InvoiceDetail_BeforInsert`
--
CREATE TRIGGER TG_InvoiceDetail_BeforInsert
	BEFORE INSERT
	ON InvoiceDetail
	FOR EACH ROW
BEGIN
IF NEW.InvoiceDetailId IS NULL OR NEW.InvoiceDetailId = '' OR  NEW.InvoiceDetailId = '00000000-0000-0000-0000-000000000000' THEN
  SET NEW.InvoiceDetailId = UUID();
  END IF;
   IF NEW.CreatedDate IS NULL THEN
  SET NEW.CreatedDate = CURRENT_TIMESTAMP();
  END IF;
END
$$

--
-- Create procedure `Proc_Statistic_GetInvoiceByEmployee_V1`
--
CREATE PROCEDURE Proc_Statistic_GetInvoiceByEmployee_V1(IN p_StartDate DATETIME, IN p_EndDate DATETIME, IN p_OrganizationId CHAR(36))
BEGIN

 -- Danh sách nhân viên theo đơn vị:
  CREATE TEMPORARY TABLE IF NOT EXISTS tbEmployee AS
    SELECT EmployeeId,e.FullName FROM Employee e WHERE OrganizationId = p_OrganizationId;

  -- Danh sách hóa đơn:
  CREATE TEMPORARY TABLE IF NOT EXISTS tbInvoice AS
    SELECT i.EmployeeId,i.InvoiceId,InvoiceDate,i.TotalMoney 
    FROM Invoice i 
    INNER JOIN tbEmployee e ON e.EmployeeId = i.EmployeeId  
    WHERE OrganizationId = p_OrganizationId 
      AND i.InvoiceDate BETWEEN p_StartDate AND p_EndDate;

  -- Chi tiết hóa đơn có trong khoảng thời gian:
  CREATE TEMPORARY TABLE IF NOT EXISTS tbInvoiceDetail AS
    SELECT id.ProductId,id.TotalMoney, i.InvoiceDate,i.EmployeeId 
    FROM InvoiceDetail id INNER JOIN tbInvoice i ON id.InvoiceId = i.InvoiceId;

  -- Danh mục sản phẩm được bán có trong hóa đơn (Kèm theo tổng tiền - nhóm theo nhân viên và từng sản phẩm):
  CREATE TEMPORARY TABLE IF NOT EXISTS tbTotalMoneyProducts AS
    SELECT t.EmployeeId,
            t.ProductId, 
            p.GroupProductId,
            SUM(IFNULL(t.TotalMoney,0)) AS TotalMoney 
    FROM tbInvoiceDetail t 
      INNER JOIN Product p ON t.ProductId = p.ProductId 
      GROUP BY t.EmployeeId, t.ProductId, p.GroupProductId;

 -- Dữ liệu thống kê các nhóm sản phẩm theo từng nhân viên:
 CREATE TEMPORARY TABLE IF NOT EXISTS tbTotalMoneyGroupProducts AS
 SELECT t.EmployeeId, 
       g.GroupProductId, 
       g.GroupProductName, 
       SUM(t.TotalMoney) AS TotalMoneys 
 FROM tbTotalMoneyProducts t 
        LEFT JOIN GroupProduct g ON t.GroupProductId = g.GroupProductId
        GROUP BY  t.EmployeeId, 
                 g.GroupProductId, 
                 g.GroupProductName;

-- Kết quả cuối cùng:
CREATE TEMPORARY TABLE IF NOT EXISTS tbResult AS
  SELECT t.EmployeeId,
        t.FullName,
        y.GroupProductId,
        y.GroupProductName,SUM(IFNULL(y.TotalMoneys,0)) AS TotalMoneys 
  FROM tbEmployee t 
    LEFT JOIN tbTotalMoneyGroupProducts y ON t.EmployeeId = y.EmployeeID
    GROUP BY t.EmployeeId,t.FullName,y.GroupProductId,y.GroupProductName
    ORDER BY TotalMoneys DESC;
  

 SELECT * FROM tbResult;

 DROP TEMPORARY TABLE IF EXISTS tbEmployee;
 DROP TEMPORARY TABLE IF EXISTS tbInvoice;
 DROP TEMPORARY TABLE IF EXISTS tbInvoiceDetail;
 DROP TEMPORARY TABLE IF EXISTS tbTotalMoneyProducts;
 DROP TEMPORARY TABLE IF EXISTS tbTotalMoneyGroupProducts;
 DROP TABLE IF EXISTS tbResult;
END
$$

--
-- Create procedure `Proc_Invoice_GetPaging_V2`
--
CREATE PROCEDURE Proc_Invoice_GetPaging_V2(IN p_organizationId CHAR(36), IN p_limit INT, IN p_offset INT, IN p_textFilter VARCHAR(255), OUT p_totalRecords INT)
BEGIN
  CREATE TEMPORARY TABLE IF NOT EXISTS tbInvoice AS
      SELECT i.InvoiceId,
           i.InvoiceCode,
           i.InvoiceDate,
           i.InvoiceStatus,
           i.EmployeeId,
           i.CustomerId,
           i.CustomerName,
           i.CustomerAddress,
           i.TotalMoney,
           i.Description,
           i.OrganizationId,
           i.CreatedDate,
           i.CreatedBy,
           i.ModifiedDate,
           i.ModifiedBy,
           e.FirstName,
           e.LastName,
           e.FullName,
    CONCAT('[',GROUP_CONCAT(CONCAT('{"ProductName":"',p.ProductName,'","Total":',IFNULL(ide.TotalMoney,0),'}') SEPARATOR ','),']') AS ProductList
    FROM Invoice i 
    LEFT JOIN Employee e ON i.EmployeeId = e.EmployeeId
    LEFT JOIN InvoiceDetail ide ON i.InvoiceId = ide.InvoiceId
    INNER JOIN Product p ON ide.ProductId = p.ProductId
    WHERE (i.OrganizationId= p_organizationId) AND (i.InvoiceCode LIKE CONCAT('%',IFNULL(p_textFilter,''),'%') OR e.FullName LIKE CONCAT('%',IFNULL(p_textFilter,''),'%'))
    GROUP BY i.InvoiceId,
           i.InvoiceCode,
           i.InvoiceDate,
           i.InvoiceStatus,
           i.EmployeeId,
           i.CustomerId,
           i.CustomerName,
           i.CustomerAddress,
           i.TotalMoney,
           i.Description,
           i.OrganizationId,
           i.CreatedDate,
           i.CreatedBy,
           i.ModifiedDate,
           i.ModifiedBy,
           e.FirstName,
           e.LastName,
           e.FullName
    ORDER BY i.CreatedDate DESC;

    set p_totalRecords = (SELECT COUNT(*) FROM tbInvoice);
    SELECT * FROM  tbInvoice i LIMIT p_limit OFFSET p_offset;

DROP TEMPORARY TABLE IF EXISTS tbInvoice;
END
$$

DELIMITER ;

--
-- Create view `View_StatisticInvoiceByEmployee`
--
CREATE 
VIEW View_StatisticInvoiceByEmployee
AS
	SELECT
	  `e`.`EmployeeId` AS `EmployeeId`,
	  `e`.`OrganizationId` AS `OrganizationId`,
	  `e`.`FullName` AS `FullName`,
	  `i`.`InvoiceDate` AS `InvoiceDate`,
	  `i`.`TotalMoney` AS `TotalMoney`,
	  `id`.`ProductId` AS `ProductId`,
	  `p`.`ProductName` AS `ProductName`,
	  `gp`.`GroupProductId` AS `GroupProductId`,
	  `gp`.`GroupProductName` AS `GroupProductName`
	FROM ((((`Employee` `e`
	  LEFT JOIN `Invoice` `i`
	    ON (`e`.`EmployeeId` = `i`.`EmployeeId`))
	  LEFT JOIN `InvoiceDetail` `id`
	    ON (`i`.`InvoiceId` = `id`.`InvoiceId`))
	  LEFT JOIN `Product` `p`
	    ON (`id`.`ProductId` = `p`.`ProductId`))
	  LEFT JOIN `GroupProduct` `gp`
	    ON (`p`.`GroupProductId` = `gp`.`GroupProductId`));

--
-- Create table `DebitDetail`
--
CREATE TABLE DebitDetail (
  DebitDetailId CHAR(36) NOT NULL,
  CustomerId CHAR(36) NOT NULL,
  RefId CHAR(36) NOT NULL,
  Amount DECIMAL(18, 4) NOT NULL,
  DebitType INT(11) NOT NULL DEFAULT 0,
  PaymentType INT(11) DEFAULT NULL,
  CreateDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (DebitDetailId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE DebitDetail 
  ADD CONSTRAINT FK_DebitDetail_CustomerId FOREIGN KEY (CustomerId)
    REFERENCES Customer(CustomerId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE DebitDetail 
  ADD CONSTRAINT FK_DebitDetail_RefId FOREIGN KEY (RefId)
    REFERENCES Ref(RefId) ON DELETE NO ACTION;

--
-- Create view `View_DebitDetail`
--
CREATE 
VIEW View_DebitDetail
AS
	SELECT
	  `dd`.`DebitDetailId` AS `DebitDetailId`,
	  `dd`.`CustomerId` AS `CustomerId`,
	  `c`.`CustomerCode` AS `CustomerCode`,
	  `c`.`FullName` AS `FullName`,
	  `dd`.`RefId` AS `RefId`,
	  `dd`.`Amount` AS `Amount`,
	  `dd`.`DebitType` AS `DebitType`,
	  `dd`.`PaymentType` AS `PaymentType`,
	  `dd`.`CreateDate` AS `CreateDate`,
	  `dd`.`CreatedBy` AS `CreatedBy`,
	  `dd`.`ModifiedDate` AS `ModifiedDate`,
	  `dd`.`ModifiedBy` AS `ModifiedBy`
	FROM (`DebitDetail` `dd`
	  LEFT JOIN `Customer` `c`
	    ON (`dd`.`CustomerId` = `c`.`CustomerId`));

--
-- Create table `Branch`
--
CREATE TABLE Branch (
  BranchId CHAR(36) NOT NULL,
  BranchCode VARCHAR(20) NOT NULL,
  BranchName VARCHAR(255) NOT NULL,
  Tel VARCHAR(50) DEFAULT NULL,
  Email VARCHAR(100) DEFAULT NULL,
  Address VARCHAR(255) DEFAULT NULL,
  Inactive BIT(1) NOT NULL DEFAULT b'0',
  OrganizationId CHAR(36) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (BranchId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Chi nhánh/ Cửa hàng';

--
-- Create foreign key
--
ALTER TABLE Branch 
  ADD CONSTRAINT FK_Branch_OrganizationId FOREIGN KEY (OrganizationId)
    REFERENCES Organization(OrganizationId) ON DELETE NO ACTION;

--
-- Create table `Stock`
--
CREATE TABLE Stock (
  StockId CHAR(36) NOT NULL,
  StockCode VARCHAR(20) NOT NULL,
  StockName VARCHAR(255) NOT NULL,
  BranchId CHAR(36) DEFAULT NULL,
  Inactive BIT(1) NOT NULL DEFAULT b'0',
  StockType INT(11) DEFAULT NULL,
  IsSystem BIT(1) NOT NULL DEFAULT b'0',
  IsDefault BIT(1) NOT NULL DEFAULT b'0',
  Description VARCHAR(255) DEFAULT NULL,
  OrganizationId CHAR(36) NOT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (StockId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE Stock 
  ADD CONSTRAINT FK_Stock_BranchId FOREIGN KEY (BranchId)
    REFERENCES Branch(BranchId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE Stock 
  ADD CONSTRAINT FK_Stock_OrganozationId FOREIGN KEY (OrganizationId)
    REFERENCES Organization(OrganizationId) ON DELETE NO ACTION;

--
-- Create table `InventoryItemCategory`
--
CREATE TABLE InventoryItemCategory (
  InventoryItemCategoryId CHAR(36) NOT NULL,
  InventoryItemCategoryCode VARCHAR(20) NOT NULL,
  InventoryItemCategoryName VARCHAR(255) NOT NULL,
  Description VARCHAR(255) DEFAULT NULL,
  Inactive BIT(1) NOT NULL DEFAULT b'0',
  SortOrder INT(11) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (InventoryItemCategoryId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Nhóm hàng hóa';

--
-- Create table `InventoryItem`
--
CREATE TABLE InventoryItem (
  InventoryItemId CHAR(36) NOT NULL,
  InventoryItemCode VARCHAR(20) NOT NULL,
  InventoryItemName VARCHAR(255) NOT NULL,
  BranchId CHAR(36) DEFAULT NULL,
  InventoryItemType INT(11) DEFAULT NULL COMMENT 'Loại hàng hóa()',
  InventoryItemCategoryId CHAR(36) DEFAULT NULL,
  Barcode VARCHAR(255) DEFAULT NULL,
  UnitPrice DECIMAL(18, 4) DEFAULT NULL COMMENT 'Giá bán',
  Quantity DECIMAL(18, 4) NOT NULL DEFAULT 0.0000,
  CostPrice DECIMAL(18, 4) DEFAULT NULL COMMENT 'Giá mua',
  MarketPrice DECIMAL(18, 4) DEFAULT NULL COMMENT 'Giá thị trường',
  UnitId CHAR(36) DEFAULT NULL,
  Description VARCHAR(255) DEFAULT NULL,
  Color VARCHAR(255) DEFAULT NULL,
  ColourCode VARCHAR(255) DEFAULT NULL,
  Size VARCHAR(255) DEFAULT NULL,
  Material VARCHAR(255) DEFAULT NULL,
  ImgPath VARCHAR(255) DEFAULT NULL,
  IsInventoryItem BIT(1) NOT NULL DEFAULT b'1',
  IsImageByColor BIT(1) NOT NULL DEFAULT b'0',
  Inactive BIT(1) NOT NULL DEFAULT b'0',
  VATRate DECIMAL(18, 4) DEFAULT NULL,
  StockId CHAR(36) DEFAULT NULL,
  OrganizationId CHAR(36) DEFAULT NULL,
  CreatedDate VARCHAR(255) DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate VARCHAR(255) DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (InventoryItemId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create index `UK_InventoryItem_InventoryItemCode` on table `InventoryItem`
--
ALTER TABLE InventoryItem 
  ADD UNIQUE INDEX UK_InventoryItem_InventoryItemCode(InventoryItemCode);

--
-- Create index `IDX_InventoryItem_InventoryItemName` on table `InventoryItem`
--
ALTER TABLE InventoryItem 
  ADD INDEX IDX_InventoryItem_InventoryItemName(InventoryItemName);

--
-- Create foreign key
--
ALTER TABLE InventoryItem 
  ADD CONSTRAINT FK_InventoryItem_BranchId FOREIGN KEY (BranchId)
    REFERENCES Branch(BranchId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE InventoryItem 
  ADD CONSTRAINT FK_InventoryItem_InventoryItemCategoryId FOREIGN KEY (InventoryItemCategoryId)
    REFERENCES InventoryItemCategory(InventoryItemCategoryId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE InventoryItem 
  ADD CONSTRAINT FK_InventoryItem_StockId FOREIGN KEY (StockId)
    REFERENCES Stock(StockId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE InventoryItem 
  ADD CONSTRAINT FK_InventoryItem_UnitId FOREIGN KEY (UnitId)
    REFERENCES Unit(UnitId) ON DELETE NO ACTION;

DELIMITER $$

--
-- Create trigger `TG_InventoryItem_BeforeInsert`
--
CREATE TRIGGER TG_InventoryItem_BeforeInsert
	BEFORE INSERT
	ON InventoryItem
	FOR EACH ROW
BEGIN
  SET NEW.CreatedDate = CURRENT_TIMESTAMP();
END
$$

--
-- Create procedure `Proc_InventoryItems_GetInventoryItemForSale`
--
CREATE PROCEDURE Proc_InventoryItems_GetInventoryItemForSale(IN p_Organization CHAR(36))
BEGIN
   SELECT ii.InventoryItemId,
          ii.InventoryItemCode,
          ii.InventoryItemName,
          ii.BranchId,
          ii.InventoryItemType,
          ii.InventoryItemCategoryId,
          ii.Barcode,
          ii.UnitPrice,
          ii.CostPrice,
          ii.UnitId,
          ii.Description,
          ii.Color,
          ii.ColourCode,
          ii.Size,
          ii.Material,
          ii.ImgPath,
          ii.IsInventoryItem,
          ii.IsImageByColor,
          ii.Inactive,
          ii.VATRate,
          ii.StockId,
          ii.CreatedDate,
          ii.CreatedBy,
          ii.ModifiedDate,
          ii.ModifiedBy FROM InventoryItem ii WHERE ii.OrganizationId = p_Organization;
END
$$

--
-- Create procedure `Proc_InventoryItems_GetInventoryItemAdminResponses`
--
CREATE PROCEDURE Proc_InventoryItems_GetInventoryItemAdminResponses(IN p_Organization CHAR(36))
BEGIN
  SELECT ii.InventoryItemId,
          ii.InventoryItemCode,
          ii.InventoryItemName,
          ii.BranchId,
          ii.InventoryItemType,
          ii.InventoryItemCategoryId,
          ii.Barcode,
          ii.UnitPrice,
          ii.CostPrice,
          ii.UnitId,
          ii.Description,
          ii.Color,
          ii.ColourCode,
          ii.Size,
          ii.Material,
          ii.ImgPath,
          ii.IsInventoryItem,
          ii.IsImageByColor,
          ii.Inactive,
          ii.VATRate,
          ii.StockId,
          ii.CreatedDate,
          ii.CreatedBy,
          ii.ModifiedDate,
          ii.ModifiedBy FROM InventoryItem ii WHERE ii.OrganizationId = p_Organization;
END
$$

--
-- Create procedure `Proc_InventoryItems_FilterInventoryItemSaleResponses`
--
CREATE PROCEDURE Proc_InventoryItems_FilterInventoryItemSaleResponses(IN p_Organization char(36), IN p_key varchar(255))
BEGIN
    SELECT
      ii.InventoryItemId,
      ii.InventoryItemCode,
      ii.InventoryItemName,
      ii.BranchId,
      ii.InventoryItemType,
      ii.InventoryItemCategoryId,
      ii.Barcode,
      ii.UnitPrice,
      ii.CostPrice,
      ii.UnitId,
      ii.Description,
      ii.Color,
      ii.ColourCode,
      ii.Size,
      ii.Material,
      ii.ImgPath,
      ii.IsInventoryItem,
      ii.IsImageByColor,
      ii.Inactive,
      ii.VATRate,
      ii.StockId,
      ii.CreatedDate,
      ii.CreatedBy,
      ii.ModifiedDate,
      ii.ModifiedBy
    FROM InventoryItem ii
    WHERE ii.OrganizationId = p_Organization
    AND ((p_key IS NULL)
    || (p_key IS NOT NULL
    AND (ii.Barcode LIKE CONCAT('%', p_key, '%')
    OR ii.InventoryItemCode LIKE CONCAT('%', p_key, '%')
    OR ii.InventoryItemName LIKE CONCAT('%', p_key, '%'))));
  
END
$$

DELIMITER ;

--
-- Create view `View_InventoryItem`
--
CREATE 
VIEW View_InventoryItem
AS
	SELECT
	  `ii`.`InventoryItemId` AS `InventoryItemId`,
	  `ii`.`InventoryItemCode` AS `InventoryItemCode`,
	  `ii`.`InventoryItemName` AS `InventoryItemName`,
	  `ii`.`BranchId` AS `BranchId`,
	  `ii`.`InventoryItemType` AS `InventoryItemType`,
	  `ii`.`InventoryItemCategoryId` AS `InventoryItemCategoryId`,
	  `iic`.`InventoryItemCategoryName` AS `InventoryItemCategoryName`,
	  `ii`.`Barcode` AS `Barcode`,
	  `ii`.`UnitPrice` AS `UnitPrice`,
	  `ii`.`CostPrice` AS `CostPrice`,
	  `ii`.`UnitId` AS `UnitId`,
	  `u`.`UnitName` AS `UnitName`,
	  `ii`.`Description` AS `Description`,
	  `ii`.`Color` AS `Color`,
	  `ii`.`ColourCode` AS `ColourCode`,
	  `ii`.`Size` AS `Size`,
	  `ii`.`Material` AS `Material`,
	  `ii`.`ImgPath` AS `ImgPath`,
	  `ii`.`IsInventoryItem` AS `IsInventoryItem`,
	  `ii`.`IsImageByColor` AS `IsImageByColor`,
	  `ii`.`Inactive` AS `Inactive`,
	  `ii`.`VATRate` AS `VATRate`,
	  `ii`.`StockId` AS `StockId`,
	  `ii`.`OrganizationId` AS `OrganizationId`,
	  `ii`.`CreatedDate` AS `CreatedDate`,
	  `ii`.`CreatedBy` AS `CreatedBy`,
	  `ii`.`ModifiedDate` AS `ModifiedDate`,
	  `ii`.`ModifiedBy` AS `ModifiedBy`
	FROM ((`InventoryItem` `ii`
	  LEFT JOIN `InventoryItemCategory` `iic`
	    ON (`ii`.`InventoryItemCategoryId` = `iic`.`InventoryItemCategoryId`))
	  LEFT JOIN `Unit` `u`
	    ON (`ii`.`UnitId` = `u`.`UnitId`));

--
-- Create table `StockInventory`
--
CREATE TABLE StockInventory (
  StockInventoryId CHAR(36) NOT NULL,
  StockId CHAR(36) NOT NULL,
  InventoryItemId CHAR(36) NOT NULL COMMENT 'Mặt hàng',
  RefId CHAR(36) DEFAULT NULL COMMENT 'Phiếu nhập/xuất mặt hàng',
  Quantity DECIMAL(18, 4) NOT NULL,
  UnitPrice DECIMAL(18, 4) DEFAULT NULL,
  CostPrice DECIMAL(18, 4) DEFAULT NULL,
  ExpiryDate DATETIME DEFAULT NULL COMMENT 'Ngày hết hạn sử dụng',
  DateOfManufacture DATETIME DEFAULT NULL COMMENT 'Ngày sản xuất',
  Description VARCHAR(255) DEFAULT NULL COMMENT 'Mô tả',
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (StockInventoryId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Chi tiết kho hàng';

--
-- Create foreign key
--
ALTER TABLE StockInventory 
  ADD CONSTRAINT FK_StockDetail_InventoryItemId FOREIGN KEY (InventoryItemId)
    REFERENCES InventoryItem(InventoryItemId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE StockInventory 
  ADD CONSTRAINT FK_StockDetail_RefId FOREIGN KEY (RefId)
    REFERENCES Ref(RefId) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE StockInventory 
  ADD CONSTRAINT FK_StockDetail_StockId FOREIGN KEY (StockId)
    REFERENCES Stock(StockId) ON DELETE NO ACTION;

--
-- Create view `View_StockInventory`
--
CREATE 
VIEW View_StockInventory
AS
	SELECT
	  `si`.`StockInventoryId` AS `StockInventoryId`,
	  `si`.`StockId` AS `StockId`,
	  `ii`.`InventoryItemId` AS `InventoryItemId`,
	  `ii`.`InventoryItemCode` AS `InventoryItemCode`,
	  `ii`.`InventoryItemName` AS `InventoryItemName`,
	  `si`.`RefId` AS `RefId`,
	  `si`.`Quantity` AS `Quantity`,
	  `si`.`UnitPrice` AS `UnitPrice`,
	  `si`.`CostPrice` AS `CostPrice`,
	  `si`.`ExpiryDate` AS `ExpiryDate`,
	  `si`.`DateOfManufacture` AS `DateOfManufacture`,
	  `si`.`Description` AS `Description`,
	  `ii`.`BranchId` AS `BranchId`,
	  `ii`.`InventoryItemType` AS `InventoryItemType`,
	  `ii`.`InventoryItemCategoryId` AS `InventoryItemCategoryId`,
	  `ii`.`Barcode` AS `Barcode`,
	  `ii`.`MarketPrice` AS `MarketPrice`,
	  `ii`.`UnitId` AS `UnitId`,
	  `ii`.`Color` AS `Color`,
	  `ii`.`ColourCode` AS `ColourCode`,
	  `ii`.`Size` AS `Size`,
	  `ii`.`Material` AS `Material`,
	  `ii`.`ImgPath` AS `ImgPath`,
	  `ii`.`IsInventoryItem` AS `IsInventoryItem`,
	  `ii`.`IsImageByColor` AS `IsImageByColor`,
	  `ii`.`Inactive` AS `Inactive`,
	  `ii`.`VATRate` AS `VATRate`,
	  `ii`.`OrganizationId` AS `OrganizationId`,
	  `si`.`CreatedDate` AS `CreatedDate`,
	  `si`.`CreatedBy` AS `CreatedBy`,
	  `si`.`ModifiedDate` AS `ModifiedDate`,
	  `si`.`ModifiedBy` AS `ModifiedBy`
	FROM (`StockInventory` `si`
	  LEFT JOIN `InventoryItem` `ii`
	    ON (`si`.`InventoryItemId` = `ii`.`InventoryItemId`));

DELIMITER $$

--
-- Create procedure `Proc_Ref_GetStockInventoryByRefId`
--
CREATE PROCEDURE Proc_Ref_GetStockInventoryByRefId(IN p_organizationId CHAR(36), IN p_refId CHAR(36))
BEGIN
  SELECT * FROM View_StockInventory rd 
  WHERE RefId = p_refId;
END
$$

DELIMITER ;

--
-- Create table `RefDetail`
--
CREATE TABLE RefDetail (
  RefDetailId CHAR(36) NOT NULL,
  RefId CHAR(36) DEFAULT NULL,
  RefDetailType INT(11) DEFAULT NULL,
  InventoryItemId CHAR(36) DEFAULT NULL,
  Quantity DECIMAL(18, 4) DEFAULT NULL,
  UnitId CHAR(36) DEFAULT NULL,
  UnitPrice DECIMAL(18, 4) DEFAULT NULL,
  TotalAmount DECIMAL(18, 4) DEFAULT NULL,
  CostPrice DECIMAL(18, 4) DEFAULT NULL,
  DiscountAmount VARCHAR(255) DEFAULT NULL,
  DiscountRate VARCHAR(255) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (RefDetailId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE RefDetail 
  ADD CONSTRAINT FK_RefDetail_InventoryItemId FOREIGN KEY (InventoryItemId)
    REFERENCES InventoryItem(InventoryItemId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE RefDetail 
  ADD CONSTRAINT FK_RefDetail_RefId FOREIGN KEY (RefId)
    REFERENCES Ref(RefId) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE RefDetail 
  ADD CONSTRAINT FK_RefDetail_UnitId FOREIGN KEY (UnitId)
    REFERENCES Unit(UnitId) ON DELETE NO ACTION;

DELIMITER $$

--
-- Create procedure `Proc_Statistic_GetInvoiceByEmployee`
--
CREATE PROCEDURE Proc_Statistic_GetInvoiceByEmployee(IN p_StartDate DATETIME, IN p_EndDate DATETIME, IN p_OrganizationId CHAR(36), IN p_categoryId CHAR(36))
BEGIN

 -- Danh sách nhân viên theo đơn vị:
  CREATE TEMPORARY TABLE IF NOT EXISTS tbEmployee AS
    SELECT EmployeeId,e.FullName 
    FROM Employee e 
    WHERE OrganizationId = p_OrganizationId;

  -- Danh sách hóa đơn:
  CREATE TEMPORARY TABLE IF NOT EXISTS tbInvoice AS
    SELECT i.EmployeeId,
    i.RefId,
    i.RefDate,
    i.TotalAmount 
    FROM Ref i 
    INNER JOIN tbEmployee e ON e.EmployeeId = i.EmployeeId  
    WHERE OrganizationId = p_OrganizationId 
      AND i.RefDate BETWEEN p_StartDate AND p_EndDate;

  -- Chi tiết hóa đơn có trong khoảng thời gian:
  CREATE TEMPORARY TABLE IF NOT EXISTS tbInvoiceDetail AS
    SELECT id.InventoryItemId,
    id.TotalAmount,
    i.RefDate,
    i.EmployeeId 
    FROM RefDetail id 
    INNER JOIN tbInvoice i ON id.RefId = i.RefId;

  -- Danh mục sản phẩm được bán có trong hóa đơn (Kèm theo tổng tiền - nhóm theo nhân viên và từng sản phẩm):
  CREATE TEMPORARY TABLE IF NOT EXISTS tbTotalMoneyProducts AS
    SELECT t.EmployeeId,
            t.InventoryItemId, 
            p.InventoryItemCategoryId,
            SUM(IFNULL(t.TotalAmount,0)) AS TotalAmount 
    FROM tbInvoiceDetail t 
      INNER JOIN InventoryItem p ON t.InventoryItemId = p.InventoryItemId 
    WHERE (p_categoryId IS NULL OR (p_categoryId IS NOT NULL AND p.InventoryItemCategoryId = p_categoryId))
    GROUP BY 
      t.EmployeeId, 
      t.InventoryItemId, 
      p.InventoryItemCategoryId;

 -- Dữ liệu thống kê các nhóm sản phẩm theo từng nhân viên:
 CREATE TEMPORARY TABLE IF NOT EXISTS tbTotalMoneyGroupProducts AS
 SELECT t.EmployeeId, 
       g.InventoryItemCategoryId, 
       g.InventoryItemCategoryName, 
       SUM(t.TotalAmount) AS TotalAmount
 FROM tbTotalMoneyProducts t 
        LEFT JOIN InventoryItemCategory g ON t.InventoryItemCategoryId = g.InventoryItemCategoryId
        GROUP BY  t.EmployeeId, 
                 g.InventoryItemCategoryId, 
                 g.InventoryItemCategoryName;

-- Kết quả cuối cùng:
CREATE TEMPORARY TABLE IF NOT EXISTS tbResult AS
  SELECT t.EmployeeId,
        t.FullName,
        y.InventoryItemCategoryId,
        y.InventoryItemCategoryName,SUM(IFNULL(y.TotalAmount,0)) AS TotalAmount 
  FROM tbEmployee t 
    LEFT JOIN tbTotalMoneyGroupProducts y ON t.EmployeeId = y.EmployeeID
    GROUP BY t.EmployeeId,t.FullName,y.InventoryItemCategoryId,y.InventoryItemCategoryName
    ORDER BY TotalAmount DESC;
  

 SELECT * FROM tbResult;

 DROP TEMPORARY TABLE IF EXISTS tbEmployee;
 DROP TEMPORARY TABLE IF EXISTS tbInvoice;
 DROP TEMPORARY TABLE IF EXISTS tbInvoiceDetail;
 DROP TEMPORARY TABLE IF EXISTS tbTotalMoneyProducts;
 DROP TEMPORARY TABLE IF EXISTS tbTotalMoneyGroupProducts;
 DROP TABLE IF EXISTS tbResult;
END
$$

--
-- Create procedure `Proc_Ref_GetPaging`
--
CREATE PROCEDURE Proc_Ref_GetPaging(IN p_organizationId CHAR(36), IN p_limit INT, IN p_offset INT, IN p_textFilter VARCHAR(255), OUT p_totalRecords INT)
BEGIN
  CREATE TEMPORARY TABLE IF NOT EXISTS tbRef AS
      SELECT i.RefId,
           i.RefNo,
           i.RefDate,
           i.RefType,
           i.PaymentStatus,
           i.EmployeeId,
           i.CustomerId,
           i.CustomerName,
           i.CustomerAddress,
           i.TotalAmount,
           i.OrganizationId,
           i.CreatedDate,
           i.CreatedBy,
           i.ModifiedDate,
           i.ModifiedBy,
           e.FirstName,
           e.LastName,
           e.FullName,
    CONCAT('[',GROUP_CONCAT(CONCAT('{"InventoryItemName":"',p.InventoryItemName,'","Quantity":',ide.Quantity,',"UnitPrice":',ide.UnitPrice,',"Total":',IFNULL(ide.TotalAmount,0),'}') SEPARATOR ','),']') AS InventoryItemList
    FROM Ref i 
    LEFT JOIN Employee e ON i.EmployeeId = e.EmployeeId
    LEFT JOIN RefDetail ide ON i.RefId = ide.RefId
    INNER JOIN InventoryItem p ON ide.InventoryItemId = p.InventoryItemId
    WHERE (i.OrganizationId= p_organizationId) AND (i.RefNo LIKE CONCAT('%',IFNULL(p_textFilter,''),'%') OR e.FullName LIKE CONCAT('%',IFNULL(p_textFilter,''),'%'))
    GROUP BY i.RefId,
           i.RefNo,
           i.RefDate,
           i.RefType,
           i.PaymentStatus,
           i.EmployeeId,
           i.CustomerId,
           i.CustomerName,
           i.CustomerAddress,
           i.TotalAmount,
           i.OrganizationId,
           i.CreatedDate,
           i.CreatedBy,
           i.ModifiedDate,
           i.ModifiedBy,
           e.FirstName,
           e.LastName,
           e.FullName
    ORDER BY i.CreatedDate DESC;

    set p_totalRecords = (SELECT COUNT(*) FROM tbRef);
    SELECT * FROM  tbRef i LIMIT p_limit OFFSET p_offset;

DROP TEMPORARY TABLE IF EXISTS tbRef;
END
$$

--
-- Create procedure `Proc_GetProfitAmountByItems`
--
CREATE PROCEDURE Proc_GetProfitAmountByItems(IN p_startDate DATETIME, IN p_endDate DATETIME, IN p_organizationId CHAR(36), IN p_categoryId CHAR(36))
BEGIN
  
DROP TEMPORARY TABLE IF EXISTS tbInventoryItem;
DROP TEMPORARY TABLE IF EXISTS tbRefDetail;
DROP TEMPORARY TABLE IF EXISTS tbCalculatorDetail;
DROP TEMPORARY TABLE IF EXISTS tbProfitByItem;
DROP TEMPORARY TABLE IF EXISTS tbResult;

CREATE TEMPORARY TABLE tbInventoryItem AS
SELECT ii.InventoryItemId,
ii.InventoryItemCode,
ii.InventoryItemName,
ii.CostPrice,ii.UnitPrice, 
ii.InventoryItemCategoryId 
FROM InventoryItem ii
WHERE (p_categoryId IS NOT NULL AND ii.InventoryItemCategoryId = p_categoryId) OR p_categoryId IS NULL;

CREATE TEMPORARY TABLE tbRefDetail AS
SELECT rd.InventoryItemId, 
rd.Quantity, 
rd.CostPrice,
rd.UnitPrice,
rd.TotalAmount 
FROM RefDetail rd
INNER JOIN Ref r ON rd.RefId = r.RefId
WHERE r.RefDate BETWEEN IFNULL(p_startDate,timestamp('1900-01-01 00:00:00')) AND IFNULL(p_endDate, CURRENT_TIMESTAMP());


CREATE TEMPORARY TABLE tbCalculatorDetail AS
SELECT ROW_NUMBER() OVER (PARTITION BY  ii.InventoryItemId) AS GroupSort, 
  ii.InventoryItemId,
  ii.InventoryItemCode,
  ii.InventoryItemName,
  ii.CostPrice,
  ii.UnitPrice,
  ii.InventoryItemCategoryId,
  rd.Quantity,
  IFNULL(rd.CostPrice,0) * IFNULL(rd.Quantity,0) AS TotalCostPrice,
  IFNULL(rd.UnitPrice,0) * IFNULL(rd.Quantity,0) AS TotalUnitPrice,
  rd.TotalAmount
FROM  tbInventoryItem ii 
LEFT JOIN tbRefDetail rd ON ii.InventoryItemId = rd.InventoryItemId;


CREATE TEMPORARY TABLE tbProfitByItem AS
SELECT c.InventoryItemId, 
  c.InventoryItemCode, 
  c.InventoryItemName, 
  c.InventoryItemCategoryId, 
  SUM(IFNULL(c.Quantity,0)) AS TotalQuantity,
  SUM(IFNULL(c.TotalCostPrice,0)) AS TotalCostPrice,
  SUM(IFNULL(c.TotalUnitPrice,0)) AS TotalUnitPrice,
  SUM(IFNULL(c.TotalAmount,0)) AS TotalAmount
   FROM  tbCalculatorDetail c GROUP BY c.InventoryItemId, c.InventoryItemCode, c.InventoryItemName, c.InventoryItemCategoryId;

CREATE TEMPORARY TABLE tbResult AS
SELECT t1.InventoryItemId,
       t1.InventoryItemCode,
       t1.InventoryItemName,
       t1.InventoryItemCategoryId,
       IFNULL(t2.InventoryItemCategoryName,'(Chưa phân nhóm)') AS InventoryItemCategoryName,
       t1.TotalQuantity,
       t1.TotalCostPrice,
       t1.TotalUnitPrice,
       t1.TotalAmount,
       (t1.TotalUnitPrice - t1.TotalCostPrice) AS TotalProfitAmount 
FROM tbProfitByItem t1
LEFT JOIN InventoryItemCategory t2 ON t1.InventoryItemCategoryId = t2.InventoryItemCategoryId;

SELECT * 
FROM tbResult r ORDER BY r.TotalProfitAmount DESC;

DROP TEMPORARY TABLE IF EXISTS tbInventoryItem;
DROP TEMPORARY TABLE IF EXISTS tbRefDetail;
DROP TEMPORARY TABLE IF EXISTS tbCalculatorDetail;
DROP TEMPORARY TABLE IF EXISTS tbProfitByItem;
DROP TEMPORARY TABLE IF EXISTS tbResult;
END
$$

DELIMITER ;

--
-- Create view `View_RefDetail`
--
CREATE 
VIEW View_RefDetail
AS
	SELECT
	  `rd`.`RefDetailId` AS `RefDetailId`,
	  `rd`.`RefId` AS `RefId`,
	  `rd`.`RefDetailType` AS `RefDetailType`,
	  `rd`.`InventoryItemId` AS `InventoryItemId`,
	  `rd`.`Quantity` AS `Quantity`,
	  `rd`.`UnitId` AS `UnitId`,
	  `rd`.`UnitPrice` AS `UnitPrice`,
	  `rd`.`TotalAmount` AS `TotalAmount`,
	  `rd`.`CostPrice` AS `CostPrice`,
	  `rd`.`DiscountAmount` AS `DiscountAmount`,
	  `rd`.`DiscountRate` AS `DiscountRate`,
	  `rd`.`CreatedDate` AS `CreatedDate`,
	  `rd`.`CreatedBy` AS `CreatedBy`,
	  `rd`.`ModifiedDate` AS `ModifiedDate`,
	  `rd`.`ModifiedBy` AS `ModifiedBy`,
	  `u`.`UnitCode` AS `UnitCode`,
	  `u`.`UnitName` AS `UnitName`,
	  `ii`.`InventoryItemCode` AS `InventoryItemCode`,
	  `ii`.`InventoryItemName` AS `InventoryItemName`,
	  `ii`.`ImgPath` AS `ImgPath`
	FROM ((`RefDetail` `rd`
	  LEFT JOIN `InventoryItem` `ii`
	    ON (`rd`.`InventoryItemId` = `ii`.`InventoryItemId`))
	  LEFT JOIN `Unit` `u`
	    ON (`rd`.`UnitId` = `u`.`UnitId`));

DELIMITER $$

--
-- Create procedure `Proc_Ref_GetRefDetailByRefId`
--
CREATE PROCEDURE Proc_Ref_GetRefDetailByRefId(IN p_organizationId CHAR(36), IN p_refId CHAR(36))
BEGIN
  SELECT * FROM View_RefDetail rd 
  WHERE RefId = p_refId;
END
$$

DELIMITER ;

--
-- Create view `View_Ref`
--
CREATE 
VIEW View_Ref
AS
	SELECT
	  `r`.`RefId` AS `RefId`,
	  `r`.`RefNo` AS `RefNo`,
	  `r`.`RefDate` AS `RefDate`,
	  `r`.`RefType` AS `RefType`,
	  `r`.`BranchId` AS `BranchId`,
	  `r`.`EmployeeId` AS `EmployeeID`,
	  `r`.`CreateInvoiceDate` AS `CreateInvoiceDate`,
	  `r`.`PaymentType` AS `PaymentType`,
	  `r`.`PaymentStatus` AS `PaymentStatus`,
	  `r`.`CustomerId` AS `CustomerId`,
	  `r`.`CustomerName` AS `CustomerName`,
	  `r`.`CustomerAddress` AS `CustomerAddress`,
	  `r`.`AccountObjectId` AS `AccountObjectID`,
	  `r`.`AccountObjectName` AS `AccountObjectName`,
	  `r`.`ContactName` AS `ContactName`,
	  `r`.`JournalMemo` AS `JournalMemo`,
	  `r`.`TotalAmount` AS `TotalAmount`,
	  `r`.`ActualReceiveAmount` AS `ActualReceiveAmount`,
	  `r`.`ChangeAmount` AS `ChangeAmount`,
	  `r`.`OrganizationId` AS `OrganizationId`,
	  `r`.`CreatedDate` AS `CreatedDate`,
	  `r`.`CreatedBy` AS `CreatedBy`,
	  `r`.`ModifiedDate` AS `ModifiedDate`,
	  `r`.`ModifiedBy` AS `ModifiedBy`,
	  `rd`.`RefDetailId` AS `RefDetailId`,
	  `rd`.`RefDetailType` AS `RefDetailType`,
	  `rd`.`InventoryItemId` AS `InventoryItemId`,
	  `rd`.`Quantity` AS `Quantity`,
	  `rd`.`UnitId` AS `UnitId`,
	  `rd`.`UnitPrice` AS `UnitPrice`,
	  `rd`.`TotalAmount` AS `TotalAmountRefDetail`,
	  `rd`.`CostPrice` AS `CostPrice`,
	  `rd`.`DiscountAmount` AS `DiscountAmount`,
	  `rd`.`DiscountRate` AS `DiscountRate`
	FROM (`Ref` `r`
	  LEFT JOIN `RefDetail` `rd`
	    ON (`r`.`RefId` = `rd`.`RefId`));

DELIMITER $$

--
-- Create procedure `Proc_SaleReportByItems`
--
CREATE PROCEDURE Proc_SaleReportByItems(IN p_startDate DATETIME, IN p_endDate DATETIME, IN p_organizationId CHAR(36), IN p_categoryId CHAR(36), IN p_inventoryItemId CHAR(36), IN p_customerId CHAR(36))
BEGIN
 
  SET @p_categoryId = p_categoryId;
  SET @p_startDate = p_startDate;
  SET @p_endDate = p_endDate;
  SET @p_inventoryItemId = p_inventoryItemId;
  SET @p_organizationId = p_organizationId;
  SET @p_customerId = p_customerId;

  DROP TEMPORARY TABLE IF EXISTS tbInventoryItem;
  DROP TEMPORARY TABLE IF EXISTS tbRefDetail;
  DROP TEMPORARY TABLE IF EXISTS tbCalculatorDetail;

  CREATE TEMPORARY TABLE tbInventoryItem AS
  SELECT
    ii.InventoryItemId,
    ii.InventoryItemCode,
    ii.InventoryItemName,
    ii.InventoryItemCategoryId,
    ii.InventoryItemCategoryName
  FROM View_InventoryItem ii
  WHERE ((@p_categoryId IS NOT NULL
  AND ii.InventoryItemCategoryId = @p_categoryId)
  OR @p_categoryId IS NULL) -- Theo danh mục
  AND ((@p_inventoryItemId IS NOT NULL
  AND ii.InventoryItemId = @p_inventoryItemId)
  OR @p_inventoryItemId IS NULL) -- Hàng hoá cụ thể
  AND ((@p_organizationId IS NOT NULL
  AND ii.OrganizationId = @p_organizationId)
  OR @p_organizationId IS NULL); -- Theo đơn vị

  CREATE TEMPORARY TABLE tbRefDetail AS
  SELECT
    r.RefId,
    r.RefNo,
    r.RefDate,
    r.CustomerId,
    IFNULL(r.CustomerName,'Khách vãng lai') AS CustomerName,
    r.CustomerAddress,
    r.EmployeeID,
    e.FullName,
    r.InventoryItemId,
    r.Quantity,
    r.CostPrice,
    r.UnitPrice,
    r.TotalAmount
  FROM View_Ref r
    LEFT JOIN Employee e ON r.EmployeeID = e.EmployeeId
  WHERE (r.RefDate BETWEEN IFNULL(@p_startDate, TIMESTAMP('1900-01-01 00:00:00')) AND IFNULL(@p_endDate, CURRENT_TIMESTAMP()))
  AND ((@p_organizationId IS NOT NULL
  AND r.OrganizationId = @p_organizationId)
  OR @p_organizationId IS NULL)
  AND ((@p_inventoryItemId IS NOT NULL
  AND r.InventoryItemId = @p_inventoryItemId)
  OR @p_inventoryItemId IS NULL) -- Hàng hoá cụ thể
  AND ((@p_customerId IS NOT NULL
  AND r.CustomerId = @p_customerId)
  OR @p_customerId IS NULL);


  CREATE TEMPORARY TABLE tbCalculatorDetail AS
  SELECT
    rd.RefId,
    rd.RefNo,
    rd.RefDate,
    rd.CustomerId,
    rd.CustomerName,
    rd.CustomerAddress,
    rd.EmployeeID,
    rd.FullName,
    ii.InventoryItemId,
    ii.InventoryItemCode,
    ii.InventoryItemName,
    rd.CostPrice,
    rd.UnitPrice,
    ii.InventoryItemCategoryId,
    ii.InventoryItemCategoryName,
    rd.Quantity,
    IFNULL(rd.CostPrice, 0) * IFNULL(rd.Quantity, 0) AS TotalCostPrice,
    IFNULL(rd.UnitPrice, 0) * IFNULL(rd.Quantity, 0) AS TotalUnitPrice,
    ((rd.UnitPrice - rd.CostPrice)* rd.Quantity) AS TotalProfitAmount,
    rd.TotalAmount
  FROM tbInventoryItem ii
    LEFT JOIN tbRefDetail rd
      ON ii.InventoryItemId = rd.InventoryItemId;


  SELECT
    *
  FROM tbCalculatorDetail r
  WHERE r.RefNo IS NOT NULL
  ORDER BY 
  r.RefDate DESC,
  r.InventoryItemId,
  r.TotalProfitAmount DESC;
  

  DROP TEMPORARY TABLE IF EXISTS tbInventoryItem;
  DROP TEMPORARY TABLE IF EXISTS tbRefDetail;
  DROP TEMPORARY TABLE IF EXISTS tbCalculatorDetail;
END
$$

--
-- Create procedure `Proc_Report_RevenueByCustomer`
--
CREATE PROCEDURE Proc_Report_RevenueByCustomer(IN p_organizationId CHAR(36), IN p_startDate DATETIME, IN p_endDate DATETIME, IN p_customerId CHAR(36))
BEGIN
 
  set @p_organizationId = p_organizationId;
  SET @p_startDate = p_startDate;
  SET @p_endDate = p_endDate;
  SET @p_customerId = p_customerId;
  
  DROP TEMPORARY TABLE IF EXISTS tbCustomerRefDetail;
  DROP TEMPORARY TABLE IF EXISTS tbCustomerRefDetailSummary;
  DROP TEMPORARY TABLE IF EXISTS tbResult;
  
  CREATE TEMPORARY TABLE IF NOT EXISTS tbCustomerRefDetail AS
  SELECT r.RefId,
         r.RefNo,
         r.RefDate,
         r.CustomerId,
         IFNULL(c.FullName,NULL) AS CustomerName,
         r.CustomerAddress,
         r.TotalAmount, -- Tổng tiền của hoá đơn
         r.ActualReceiveAmount, -- Tiền nhận thực tế theo mỗi hoá đơn
         r.TotalAmountRefDetail, -- Tổng tiền từng mặt hàng trong hoá đơn
         r.Quantity,
         r.UnitPrice,
         r.CostPrice,
         r.OrganizationId
  FROM View_Ref r
  LEFT JOIN Customer c ON r.CustomerId = c.CustomerId
  WHERE (@p_organizationId IS NULL OR (@p_organizationId IS NOT NULL AND r.OrganizationId = @p_organizationId))
  AND (r.RefDate BETWEEN IFNULL(@p_startDate, TIMESTAMP('1900-01-01 00:00:00')) AND IFNULL(@p_endDate, CURRENT_TIMESTAMP())) 
  AND (@p_customerId IS NULL OR (@p_customerId IS NOT NULL AND r.CustomerId = @p_customerId))
  ORDER BY r.CustomerId;
  
  CREATE TEMPORARY TABLE IF NOT EXISTS tbCustomerRefDetailSummary AS
  SELECT  cr.RefId, 
          cr.RefNo,
          cr.RefDate,
          cr.CustomerId,
          cr.CustomerName,
          cr.CustomerAddress,
          SUM(cr.CostPrice * cr.Quantity) AS TotalCostPrice,
          SUM(cr.UnitPrice * cr.Quantity) AS TotalUnitPrice,
          SUM(cr.TotalAmountRefDetail) AS TotalAmountRefDetail,
          SUM((cr.UnitPrice - cr.CostPrice) * cr.Quantity) AS TotalProfitAmount,
          cr.TotalAmount,
          cr.ActualReceiveAmount,
          cr.OrganizationId 
  FROM tbCustomerRefDetail cr
  GROUP BY cr.OrganizationId,cr.RefId, cr.RefNo,cr.RefDate, cr.CustomerId,cr.CustomerName,cr.CustomerAddress;
  
  CREATE TEMPORARY TABLE IF NOT EXISTS tbResult AS
  SELECT
    crds.CustomerId,
    crds.CustomerName,
    crds.CustomerAddress,
    SUM(crds.TotalCostPrice) AS TotalCostPrice, -- tổng giá nhập theo tính toán tại thời điểm bán
    SUM(crds.TotalUnitPrice) AS TotalUnitPrice, -- Tổng giá bán theo tính toán tại thời điểm bán
    SUM(crds.TotalAmountRefDetail) AS TotalAmountRefDetail, -- Tổng cộng từng hàng hoá trong hoá đơn
    SUM(crds.TotalAmount) AS TotalAmount, -- Tổng cộng trên hoá đơn tổng
    SUM(crds.ActualReceiveAmount) AS TotalActualReceiveAmount, -- tổng tiền nhận thực tế trên hoá đơn tổng
    SUM(TotalProfitAmount) AS TotalProfitAmount -- Tổng lợi nhuận
  FROM tbCustomerRefDetailSummary crds
  GROUP BY  crds.CustomerId,
    crds.CustomerName,
    crds.CustomerAddress
  ORDER BY TotalAmountRefDetail DESC, ActualReceiveAmount DESC;
  
  SELECT *
  FROM tbResult r;

  DROP TEMPORARY TABLE IF EXISTS tbCustomerRefDetail;
  DROP TEMPORARY TABLE IF EXISTS tbCustomerRefDetailSummary;
  DROP TEMPORARY TABLE IF EXISTS tbResult;
END
$$

--
-- Create procedure `Proc_Customer_GetOrders`
--
CREATE PROCEDURE Proc_Customer_GetOrders(IN p_organizationId char(36), IN p_customerId char(36), IN p_startDate datetime, IN p_endDate datetime)
BEGIN
  SET @p_organizationId = p_organizationId;
  SET @p_startDate = p_startDate;
  SET @p_endDate = p_endDate;
  SET @p_customerId = p_customerId;

  DROP TABLE IF EXISTS tbRef;
  DROP TABLE IF EXISTS tbResult;

  CREATE TEMPORARY TABLE IF NOT EXISTS tbRef AS
  SELECT
    r.RefId,
    r.RefNo,
    r.RefDate,
    r.RefType,
    r.BranchId,
    r.EmployeeId,
    r.CreateInvoiceDate,
    r.PaymentType,
    r.PaymentStatus,
    IFNULL(r.CustomerId,'00000000-0000-0000-0000-000000000000') AS CustomerId,
    r.CustomerName,
    r.CustomerAddress,
    r.AccountObjectID,
    r.AccountObjectName,
    r.ContactName,
    r.JournalMemo,
    r.TotalAmount,
    r.ActualReceiveAmount,
    r.ChangeAmount,
    r.OrganizationId,
    r.RefDetailId,
    r.RefDetailType,
    r.InventoryItemId,
    r.Quantity,
    r.UnitId,
    r.UnitPrice,
    r.TotalAmountRefDetail,
    r.CostPrice,
    r.DiscountAmount,
    r.DiscountRate,
    r.CreatedDate,
    r.CreatedBy,
    r.ModifiedDate,
    r.ModifiedBy
  FROM View_Ref r
  WHERE (r.RefDate BETWEEN IFNULL(@p_startDate, timestamp('1900-01-01 00:00:00')) AND IFNULL(@p_endDate, CURRENT_TIMESTAMP()))
  AND (@p_customerId IS NULL
  OR (@p_customerId IS NOT NULL
  AND (r.CustomerId = @p_customerId)) OR (@p_customerId = '00000000-0000-0000-0000-000000000000' AND r.CustomerId IS NULL))
  AND (@p_organizationId IS NULL
  OR (@p_organizationId IS NOT NULL
  AND r.OrganizationId = @p_organizationId));

  CREATE TEMPORARY TABLE IF NOT EXISTS tbResult AS
  SELECT
    r.CustomerId,
    r.CustomerName,
    r.CustomerAddress,
    r.RefId,
    r.RefNo,
    r.RefDate,
    r.TotalAmount,
    r.ActualReceiveAmount,
    SUM(r.CostPrice * r.Quantity) AS TotalCostPrice,
    SUM(r.UnitPrice * r.Quantity) AS TotalUnitPrice,
    SUM((r.UnitPrice - r.CostPrice) * r.Quantity) AS TotalProfitAmount,
    SUM(r.TotalAmountRefDetail) AS TotalAmountRefDetail
  FROM tbRef r
  GROUP BY r.CustomerId,
           r.CustomerName,
           r.CustomerAddress,
           r.RefId,
           r.RefNo,
           r.RefDate,
           r.TotalAmount,
           r.ActualReceiveAmount;

  SELECT
    r.CustomerId,
    r.CustomerName,
    r.CustomerAddress,
    r.RefId,
    r.RefNo,
    r.RefDate,
    r.TotalAmount,
    r.ActualReceiveAmount,
    r.TotalCostPrice,
    r.TotalUnitPrice,
    r.TotalProfitAmount,
    r.TotalAmountRefDetail,
    (CASE (r.TotalAmountRefDetail - r.TotalUnitPrice) WHEN 0 THEN true ELSE false END) AS TotalAmoutIsMatch -- Tổng tiền thực tế có trùng với tính toán hay không
  FROM tbResult r;

  DROP TABLE IF EXISTS tbRef;
  DROP TABLE IF EXISTS tbResult;
END
$$

DELIMITER ;

--
-- Create table `SlotGroup`
--
CREATE TABLE SlotGroup (
  SlotGroupId CHAR(36) NOT NULL DEFAULT '',
  SlotGroupName VARCHAR(255) NOT NULL DEFAULT '',
  BranchId CHAR(36) DEFAULT NULL,
  BilledByHours BIT(1) NOT NULL DEFAULT b'0' COMMENT 'Tính tiền theo giờ (0 - không tính theo giờ; 2- tính theo giờ)',
  PriceByHour DECIMAL(18, 2) NOT NULL DEFAULT 0.00 COMMENT 'Giá khi tính theo giờ',
  Description VARCHAR(255) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (SlotGroupId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

DELIMITER $$

--
-- Create procedure `Proc_SlotGroups_GetAll`
--
CREATE PROCEDURE Proc_SlotGroups_GetAll(IN p_OrganizationId CHAR(36))
BEGIN
  SELECT sg.SlotGroupId,
         CONCAT('[',b.BranchName,']',' - ', sg.SlotGroupName) AS SlotGroupName,
         sg.BranchId,
         sg.BilledByHours,
         sg.PriceByHour,
         sg.Description,
         sg.CreatedDate,
         sg.CreatedBy,
         sg.ModifiedDate,
         sg.ModifiedBy,
         b.BranchId,
         b.BranchCode,
         b.BranchName,
         b.Tel,
         b.Email,
         b.Address,
         b.Inactive,
         b.OrganizationId 
  FROM SlotGroup sg
  LEFT JOIN Branch b ON sg.BranchId = b.BranchId WHERE b.OrganizationId = p_OrganizationId
  ORDER BY b.BranchId;
END
$$

DELIMITER ;

--
-- Create view `Views_SlotGroup`
--
CREATE 
VIEW Views_SlotGroup
AS
	SELECT
	  `sg`.`SlotGroupId` AS `SlotGroupId`,
	  `sg`.`SlotGroupName` AS `SlotGroupName`,
	  `sg`.`BilledByHours` AS `BilledByHours`,
	  `sg`.`PriceByHour` AS `PriceByHour`,
	  `sg`.`Description` AS `Description`,
	  `sg`.`CreatedDate` AS `CreatedDate`,
	  `sg`.`CreatedBy` AS `CreatedBy`,
	  `sg`.`ModifiedDate` AS `ModifiedDate`,
	  `sg`.`ModifiedBy` AS `ModifiedBy`,
	  `b`.`BranchId` AS `BranchId`,
	  `b`.`BranchCode` AS `BranchCode`,
	  `b`.`BranchName` AS `BranchName`,
	  `b`.`Tel` AS `Tel`,
	  `b`.`Email` AS `Email`,
	  `b`.`Address` AS `Address`,
	  `b`.`Inactive` AS `Inactive`,
	  `b`.`OrganizationId` AS `OrganizationId`
	FROM (`SlotGroup` `sg`
	  LEFT JOIN `Branch` `b`
	    ON (`sg`.`BranchId` = `b`.`BranchId`));

--
-- Create table `Slot`
--
CREATE TABLE Slot (
  SlotId CHAR(36) NOT NULL DEFAULT '',
  SlotCode VARCHAR(20) NOT NULL DEFAULT '',
  SlotType INT(11) DEFAULT NULL,
  SlotName VARCHAR(255) NOT NULL DEFAULT '',
  SlotGroupId CHAR(36) NOT NULL DEFAULT '',
  RefId CHAR(36) DEFAULT NULL,
  EmployeeId CHAR(36) DEFAULT NULL COMMENT 'Nhân viên phục vụ',
  CustomerId CHAR(36) DEFAULT NULL,
  OrdererName VARCHAR(255) DEFAULT NULL COMMENT 'Người đặt hàng',
  PayerName VARCHAR(255) DEFAULT NULL COMMENT 'Người thanh toán',
  TotalAmount DECIMAL(18, 2) DEFAULT NULL COMMENT 'Tổng tiền thanh toán',
  BilledByHours BIT(1) NOT NULL DEFAULT b'0' COMMENT 'Tính tiền theo giờ (0 - không tính theo giờ; 2- tính theo giờ)',
  PriceByHour DECIMAL(18, 2) NOT NULL DEFAULT 0.00 COMMENT 'Giá khi tính theo giờ',
  SlotStatus INT(11) NOT NULL DEFAULT 0 COMMENT 'Tình trạng bàn (0- chưa sử dụng; 1- đang sử dụng; 2 -  đang chờ khách đặt; 4 - Khoá)',
  TimeStart DATETIME DEFAULT NULL COMMENT 'Thời gian bắt đầu sử dụng',
  TimeEnd DATETIME DEFAULT NULL COMMENT 'Thời gian kết thúc sử dụng',
  Inactive BIT(1) NOT NULL DEFAULT b'0',
  Description VARCHAR(255) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (SlotId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Chỗ';

--
-- Create foreign key
--
ALTER TABLE Slot 
  ADD CONSTRAINT FK_Slot_CustomerId FOREIGN KEY (CustomerId)
    REFERENCES Customer(CustomerId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE Slot 
  ADD CONSTRAINT FK_Slot_EmployeeId FOREIGN KEY (EmployeeId)
    REFERENCES Employee(EmployeeId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE Slot 
  ADD CONSTRAINT FK_Slot_SlotGroupId FOREIGN KEY (SlotGroupId)
    REFERENCES SlotGroup(SlotGroupId) ON DELETE NO ACTION;

--
-- Create view `Views_Slot`
--
CREATE 
VIEW Views_Slot
AS
	SELECT
	  `s`.`SlotId` AS `SlotId`,
	  `s`.`SlotCode` AS `SlotCode`,
	  `s`.`SlotType` AS `SlotType`,
	  `s`.`SlotName` AS `SlotName`,
	  `s`.`EmployeeId` AS `EmployeeId`,
	  `s`.`RefId` AS `RefId`,
	  `e`.`FullName` AS `EmployeeName`,
	  `s`.`CustomerId` AS `CustomerId`,
	  IFNULL(`c`.`FullName`, `s`.`OrdererName`) AS `CustomerName`,
	  `s`.`OrdererName` AS `OrdererName`,
	  `s`.`PayerName` AS `PayerName`,
	  `s`.`TotalAmount` AS `TotalAmount`,
	  `s`.`BilledByHours` AS `BilledByHours`,
	  `s`.`PriceByHour` AS `PriceByHour`,
	  `s`.`SlotStatus` AS `SlotStatus`,
	  `s`.`TimeStart` AS `TimeStart`,
	  `s`.`TimeEnd` AS `TimeEnd`,
	  `s`.`Inactive` AS `Inactive`,
	  `s`.`CreatedDate` AS `CreatedDate`,
	  `s`.`CreatedBy` AS `CreatedBy`,
	  `s`.`ModifiedDate` AS `ModifiedDate`,
	  `s`.`ModifiedBy` AS `ModifiedBy`,
	  `sg`.`SlotGroupId` AS `SlotGroupId`,
	  CONCAT('[', `b`.`BranchName`, ']', ' - ', `sg`.`SlotGroupName`) AS `SlotGroupName`,
	  `sg`.`BranchId` AS `BranchId`,
	  `b`.`OrganizationId` AS `OrganizationId`,
	  `b`.`BranchName` AS `BranchName`,
	  `sg`.`Description` AS `Description`
	FROM ((((`Slot` `s`
	  LEFT JOIN `SlotGroup` `sg`
	    ON (`s`.`SlotGroupId` = `sg`.`SlotGroupId`))
	  LEFT JOIN `Employee` `e`
	    ON (`s`.`EmployeeId` = `e`.`EmployeeId`))
	  LEFT JOIN `Branch` `b`
	    ON (`sg`.`BranchId` = `b`.`BranchId`))
	  LEFT JOIN `Customer` `c`
	    ON (`s`.`CustomerId` = `c`.`CustomerId`));

DELIMITER $$

--
-- Create procedure `Proc_Slot_GetAllSlotDto`
--
CREATE PROCEDURE Proc_Slot_GetAllSlotDto(IN p_orgId CHAR(36))
BEGIN
  SELECT
    vs.SlotId,
    vs.SlotCode,
    vs.SlotType,
    vs.SlotName,
    vs.RefId,
    vs.EmployeeId,
    vs.EmployeeName,
    vs.CustomerId,
    vs.CustomerName,
    vs.OrdererName,
    vs.PayerName,
    vs.TotalAmount,
    vs.BilledByHours,
    vs.PriceByHour,
    vs.SlotStatus,
    vs.TimeStart,
    vs.TimeEnd,
    vs.Inactive,
    vs.CreatedDate,
    vs.CreatedBy,
    vs.ModifiedDate,
    vs.ModifiedBy,
    vs.SlotGroupId,
    vs.SlotGroupName,
    vs.BranchId,
    vs.BranchName,
    vs.Description
  FROM Views_Slot vs WHERE (vs.OrganizationId = p_orgId AND p_orgId IS NOT NULL) OR p_orgId IS NULL;

END
$$

DELIMITER ;

--
-- Create table `SlotInvoice`
--
CREATE TABLE SlotInvoice (
  SlotInvoiceId CHAR(36) NOT NULL,
  SlotId CHAR(36) NOT NULL,
  RefId CHAR(36) NOT NULL,
  BilledByHours BIT(1) NOT NULL DEFAULT b'0',
  PriceByHour DECIMAL(18, 2) NOT NULL DEFAULT 0.00,
  TimeStart DATETIME DEFAULT NULL,
  TimeEnd DATETIME DEFAULT NULL,
  TotalAmount DECIMAL(18, 2) DEFAULT NULL,
  Description VARCHAR(255) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (SlotInvoiceId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Hóa đơn tính tiền theo bàn';

--
-- Create foreign key
--
ALTER TABLE SlotInvoice 
  ADD CONSTRAINT FK_SlotInvoice_RefId FOREIGN KEY (RefId)
    REFERENCES Ref(RefId) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE SlotInvoice 
  ADD CONSTRAINT FK_SlotInvoice_SlotId FOREIGN KEY (SlotId)
    REFERENCES Slot(SlotId) ON DELETE NO ACTION;

--
-- Create view `View_SlotInvoice`
--
CREATE 
VIEW View_SlotInvoice
AS
	SELECT
	  `si`.`SlotInvoiceId` AS `SlotInvoiceId`,
	  `si`.`SlotId` AS `SlotId`,
	  `si`.`RefId` AS `RefId`,
	  `si`.`BilledByHours` AS `BilledByHours`,
	  `si`.`PriceByHour` AS `PriceByHour`,
	  `si`.`TimeStart` AS `TimeStart`,
	  `si`.`TimeEnd` AS `TimeEnd`,
	  `si`.`TotalAmount` AS `TotalAmount`,
	  `si`.`Description` AS `Description`,
	  `si`.`CreatedDate` AS `CreatedDate`,
	  `si`.`CreatedBy` AS `CreatedBy`,
	  `si`.`ModifiedDate` AS `ModifiedDate`,
	  `si`.`ModifiedBy` AS `ModifiedBy`,
	  `s`.`SlotCode` AS `SlotCode`,
	  `s`.`SlotType` AS `SlotType`,
	  `s`.`SlotName` AS `SlotName`,
	  `s`.`SlotGroupId` AS `SlotGroupId`,
	  `s`.`EmployeeId` AS `EmployeeId`,
	  `s`.`CustomerId` AS `CustomerId`,
	  `s`.`OrdererName` AS `OrdererName`,
	  `s`.`PayerName` AS `PayerName`,
	  `s`.`SlotStatus` AS `SlotStatus`,
	  `s`.`Inactive` AS `Inactive`,
	  `v`.`BranchId` AS `BranchId`,
	  `v`.`BranchName` AS `BranchName`,
	  `v`.`SlotGroupName` AS `SlotGroupName`
	FROM ((`SlotInvoice` `si`
	  LEFT JOIN `Slot` `s`
	    ON (`si`.`SlotId` = `s`.`SlotId`))
	  LEFT JOIN `Views_Slot` `v`
	    ON (`s`.`SlotId` = `v`.`SlotId`));

--
-- Create table `BankAccount`
--
CREATE TABLE BankAccount (
  BankAccountId CHAR(36) NOT NULL,
  BankAccountName VARCHAR(255) NOT NULL,
  BankAccountNumber VARCHAR(255) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (BankAccountId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `InvoicePayment`
--
CREATE TABLE InvoicePayment (
  InvoicePaymentId CHAR(36) NOT NULL,
  PaymentType INT(11) NOT NULL DEFAULT 0,
  RefId CHAR(36) DEFAULT NULL,
  Amount DECIMAL(18, 4) NOT NULL,
  BankAccountId CHAR(36) DEFAULT NULL,
  BankAccountNumber VARCHAR(255) DEFAULT NULL,
  OrganizationId CHAR(36) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (InvoicePaymentId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE InvoicePayment 
  ADD CONSTRAINT FK_InvoicePayment_BankAccountID FOREIGN KEY (BankAccountId)
    REFERENCES BankAccount(BankAccountId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE InvoicePayment 
  ADD CONSTRAINT FK_InvoicePayment_RefId FOREIGN KEY (RefId)
    REFERENCES Ref(RefId) ON DELETE CASCADE;

--
-- Create view `View_InvoicePayment`
--
CREATE 
VIEW View_InvoicePayment
AS
	SELECT
	  `ip`.`InvoicePaymentId` AS `InvoicePaymentId`,
	  `ip`.`PaymentType` AS `PaymentType`,
	  `ip`.`RefId` AS `RefId`,
	  `ip`.`Amount` AS `Amount`,
	  `ip`.`BankAccountId` AS `BankAccountId`,
	  `ip`.`BankAccountNumber` AS `BankAccountNumber`,
	  `ip`.`OrganizationId` AS `OrganizationId`,
	  `ip`.`CreatedDate` AS `CreatedDate`,
	  `ip`.`CreatedBy` AS `CreatedBy`,
	  `ip`.`ModifiedDate` AS `ModifiedDate`,
	  `ip`.`ModifiedBy` AS `ModifiedBy`
	FROM `InvoicePayment` `ip`;

DELIMITER $$

--
-- Create procedure `Proc_Ref_GetInvoicePaymentByRefId`
--
CREATE PROCEDURE Proc_Ref_GetInvoicePaymentByRefId(IN p_organizationId CHAR(36), IN p_refId CHAR(36))
BEGIN
  SELECT * FROM View_InvoicePayment v WHERE v.RefId = p_refId;
END
$$

DELIMITER ;

--
-- Create table `Role`
--
CREATE TABLE Role (
  RoleId CHAR(36) NOT NULL COMMENT 'TRIAL',
  RoleName VARCHAR(256) NOT NULL COMMENT 'TRIAL',
  RoleValue INT(11) DEFAULT NULL,
  Description VARCHAR(255) DEFAULT NULL,
  OtherName VARCHAR(255) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(100) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (RoleId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'TRIAL';

--
-- Create index `RoleNameIndex` on table `Role`
--
ALTER TABLE Role 
  ADD UNIQUE INDEX RoleNameIndex(RoleName);

--
-- Create table `UserRole`
--
CREATE TABLE UserRole (
  UserId CHAR(36) NOT NULL COMMENT 'TRIAL',
  RoleId CHAR(36) NOT NULL COMMENT 'TRIAL',
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(100) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(100) DEFAULT NULL,
  PRIMARY KEY (UserId, RoleId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'TRIAL';

--
-- Create index `IX_RoleId` on table `UserRole`
--
ALTER TABLE UserRole 
  ADD INDEX IX_RoleId(RoleId);

--
-- Create index `IX_UserId` on table `UserRole`
--
ALTER TABLE UserRole 
  ADD INDEX IX_UserId(UserId);

--
-- Create foreign key
--
ALTER TABLE UserRole 
  ADD CONSTRAINT FK_UserRole_RoleId FOREIGN KEY (RoleId)
    REFERENCES Role(RoleId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE UserRole 
  ADD CONSTRAINT FK_UserRole_UserId FOREIGN KEY (UserId)
    REFERENCES User(UserId) ON DELETE CASCADE;

--
-- Create table `Reservation`
--
CREATE TABLE Reservation (
  ReservationId CHAR(36) NOT NULL,
  ReservationDate DATETIME DEFAULT NULL COMMENT 'Thời gian đặt chỗ',
  ReservationistName VARCHAR(100) DEFAULT NULL,
  CustomerId CHAR(36) DEFAULT NULL COMMENT 'Khách đặt',
  TimeOfUse DATETIME DEFAULT NULL COMMENT 'Thời gian sử dụng',
  PhoneNumber VARCHAR(50) DEFAULT NULL COMMENT 'Số điện thoại người đặt chỗ',
  Description VARCHAR(255) DEFAULT NULL,
  ReservationStatus INT(11) NOT NULL DEFAULT 0,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL COMMENT 'Đặt chỗ',
  PRIMARY KEY (ReservationId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Đặt chỗ';

--
-- Create table `ReservationDetail`
--
CREATE TABLE ReservationDetail (
  ReservationDetailId CHAR(36) NOT NULL,
  ReservationId CHAR(36) NOT NULL,
  SlotId CHAR(36) NOT NULL,
  TimeOfUse DATETIME DEFAULT NULL,
  Description VARCHAR(255) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (ReservationDetailId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Chi tiết đặt chỗ';

--
-- Create foreign key
--
ALTER TABLE ReservationDetail 
  ADD CONSTRAINT FK_ReservationDetail_ReservationId FOREIGN KEY (ReservationId)
    REFERENCES Reservation(ReservationId) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE ReservationDetail 
  ADD CONSTRAINT FK_ReservationDetail_SlotId FOREIGN KEY (SlotId)
    REFERENCES Slot(SlotId) ON DELETE NO ACTION;

--
-- Create table `Setting`
--
CREATE TABLE Setting (
  SettingId CHAR(36) NOT NULL,
  SettingName VARCHAR(255) NOT NULL,
  SettingKey VARCHAR(255) NOT NULL,
  SettingValue VARCHAR(1000) DEFAULT NULL,
  SettingValueType INT(11) NOT NULL,
  OrganizationId CHAR(36) DEFAULT NULL,
  UserId VARCHAR(255) DEFAULT NULL,
  IsSystem BIT(1) NOT NULL DEFAULT b'0',
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (SettingId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create index `FK_Setting_OrganizationId` on table `Setting`
--
ALTER TABLE Setting 
  ADD INDEX FK_Setting_OrganizationId(OrganizationId);

--
-- Create index `FK_Setting_UserId` on table `Setting`
--
ALTER TABLE Setting 
  ADD INDEX FK_Setting_UserId(UserId);

DELIMITER $$

--
-- Create procedure `Proc_Setting_GetByOrgID`
--
CREATE PROCEDURE Proc_Setting_GetByOrgID(IN p_OrganizationId CHAR(36))
BEGIN
  SELECT s.SettingId,
         s.SettingName,
         s.SettingKey,
         s.SettingValue,
         s.SettingValueType,
         s.OrganizationId,
         s.UserId,
         s.IsSystem,
         s.CreatedDate,
         s.CreatedBy,
         s.ModifiedDate,
         s.ModifiedBy FROM Setting s WHERE (s.OrganizationId = p_OrganizationId OR s.OrganizationId IS NULL);
END
$$

--
-- Create function `Func_GetPrefixNewCode`
--
CREATE FUNCTION Func_GetPrefixNewCode(tableName varchar(255))
  RETURNS VARCHAR(50) CHARSET utf8
BEGIN
  DECLARE Prefix varchar(50);
  SET Prefix = tableName;
  SET Prefix = (SELECT
      CASE 
      WHEN tableName = 'Employee' THEN 'NV' 
      WHEN tableName = 'CustomerGroup' THEN 'NKH'
      WHEN tableName = 'EmployeePosition' THEN 'VT' 
      WHEN tableName = 'GroupProduct' THEN 'NSP' 
      WHEN tableName = 'Invoice' THEN 'HD' 
      WHEN tableName = 'MSLicense' THEN 'LS' 
      WHEN tableName = 'Organization' THEN 'DN' 
      WHEN tableName = 'Unit' THEN 'DV' 
      WHEN tableName = 'Service' THEN 'DV' 
      WHEN tableName = 'ServiceGroup' THEN 'NDV' 
      ELSE 'MS'
      END);
  RETURN Prefix;
END
$$

--
-- Create function `Func_GetSubfixIsNumber`
--
CREATE FUNCTION Func_GetSubfixIsNumber(InputString VARCHAR(255))
  RETURNS INT(11)
BEGIN
    DECLARE ctrNumber VARCHAR(50);
    DECLARE finNumber VARCHAR(50) DEFAULT '';
    DECLARE sChar VARCHAR(1);
    DECLARE inti INTEGER DEFAULT 1;
    SET inti = LENGTH(InputString);
    IF LENGTH(InputString) > 0 THEN
          set finNumber = '';
          WHILE (inti > 0) DO
            SET sChar = SUBSTRING(InputString, inti, 1);
            SET ctrNumber = FIND_IN_SET(sChar, '0,1,2,3,4,5,6,7,8,9');
            IF ctrNumber > 0 THEN
              SET finNumber = CONCAT(sChar,finNumber);
            ELSE
--               RETURN CAST(finNumber AS UNSIGNED);
              IF LENGTH(finNumber) > 0 THEN
                RETURN CONVERT(finNumber,UNSIGNED);
              ELSE
                RETURN 0;
              END IF;
            END IF;
            SET inti = inti - 1;
          END WHILE;
--         RETURN CAST(finNumber AS UNSIGNED);
          IF LENGTH(finNumber) > 0 THEN
                RETURN CONVERT(finNumber,UNSIGNED);
              ELSE
                RETURN 0;
          END IF;
    ELSE
        RETURN NULL;
    END IF; 
END
$$

--
-- Create procedure `Proc_InventoryItems_GetNewCodeAuto`
--
CREATE PROCEDURE Proc_InventoryItems_GetNewCodeAuto(IN p_prefixCode VARCHAR(255), IN p_OrganizationId CHAR(36))
BEGIN
  set @NewCodeAuto = CONCAT(p_prefixCode,'01');
  set @NewCodeInput = (SELECT InventoryItemCode FROM InventoryItem ii WHERE InventoryItemCode = @NewCodeAuto AND ii.OrganizationId = p_OrganizationId);
  IF @NewCodeInput IS NOT NULL THEN
    SET @SUB_LASTEST_CODE = (SELECT Func_GetSubfixIsNumber(@NewCodeInput)); -- 99
    SET @SUB_NEW_CODE = @SUB_LASTEST_CODE + 1; -- 100
    SET @LASTEST_CODE_LEN = LENGTH(@NewCodeInput); -- 8 (độ dài mã mới nhất - cả chữ và số)
    SET @SUB_LASTEST_CODE_LEN = LENGTH(@SUB_LASTEST_CODE);  -- 3 (độ dài mã mới nhất- chỉ tính phần số)
    IF (@SUB_LASTEST_CODE = '0') THEN
      SET @SUB_LASTEST_CODE_LEN = 0; -- Nếu SUB_CODE là 0 chứng tỏ là mã mới nhất không kết thúc là số; SET =0 để tránh mất phần Prefix
    END IF;
    SET @PREFIX_CODE =  LEFT(@NewCodeInput,@LASTEST_CODE_LEN-@SUB_LASTEST_CODE_LEN); -- Lấy Prefix
  
    IF(@PREFIX_CODE IS NULL OR @PREFIX_CODE = '') THEN
      SET  @PREFIX_CODE = CONCAT(Func_GetPrefixNewCode('InventoryItem'),'-');
    END IF;
  
    SET @NEW_CODE = CONCAT(@PREFIX_CODE,@SUB_NEW_CODE); -- Gán phần prefix và giá trị của phần subfix;
    set @CodeDuplicate =  @NEW_CODE;
  
  
    WHILE @CodeDuplicate IS NOT NULL  DO 
      SET  @CodeDuplicate = (SELECT ii.InventoryItemCode FROM InventoryItem ii WHERE ii.InventoryItemCode = @CodeDuplicate AND ii.OrganizationId = p_OrganizationId);
      IF @CodeDuplicate IS NOT NULL THEN
        SET @SUB_NEW_CODE = (@SUB_NEW_CODE + 1); -- Tăng tiếp giá trị của subfix
        SET @NEW_CODE = CONCAT(@PREFIX_CODE,@SUB_NEW_CODE); -- Gán lại mã mới
      END IF;
    END WHILE;
    SELECT @NEW_CODE;
  ELSE
    SELECT @NewCodeAuto;
  END IF;
END
$$

--
-- Create procedure `Proc_GetNewValueUnique`
--
CREATE PROCEDURE Proc_GetNewValueUnique(IN prefixCode VARCHAR(255), IN columnName VARCHAR(255), IN tableName VARCHAR(255), IN orgId CHAR(36))
BEGIN
   set @WHERE_Organization = '1=1';
--   IF p_OrganizationId IS NOT NULL THEN
--     set @WHERE_Organization = CONCAT('OrganizationId = "',p_OrganizationId,'"');
--   END IF;
 IF columnName IS NULL OR columnName = '' THEN
  set columnName = CONCAT(TRIM(tableName),'Code');
 END IF;

  SET @LASTEST_CODE = '';
  IF prefixCode IS NULL OR prefixCode IS UNKNOWN OR prefixCode = '' THEN
      SET @SQL = CONCAT('SELECT e.',columnName,' INTO @LASTEST_CODE FROM ',TRIM(tableName),' e WHERE ',@WHERE_Organization,' ORDER BY e.CreatedDate DESC,e.',columnName,' DESC LIMIT 1');
  ELSE
      set prefixCode = CONCAT(prefixCode,'01');
      SET @SQL = CONCAT('SELECT e.',columnName,' INTO @LASTEST_CODE FROM ',TRIM(tableName),' e WHERE ',@WHERE_Organization,' AND e.',columnName ,' = "',prefixCode,'" ORDER BY e.CreatedDate DESC,e.',columnName,' DESC LIMIT 1');
  END IF;
  
  PREPARE query FROM @SQL;
  EXECUTE query;
  DEALLOCATE PREPARE query;

 IF((@LASTEST_CODE IS NULL OR @LASTEST_CODE IS UNKNOWN OR @LASTEST_CODE = '') AND (prefixCode IS NOT NULL AND prefixCode != '')) THEN
      SET @LASTEST_CODE = prefixCode;
      SET @NEW_CODE = prefixCode;
 ELSE
      SET @SUB_LASTEST_CODE = (SELECT Func_GetSubfixIsNumber(@LASTEST_CODE)); -- 99
      SET @SUB_NEW_CODE = IFNULL(@SUB_LASTEST_CODE,0) + 1; -- 100
      SET @LASTEST_CODE_LEN = LENGTH(@LASTEST_CODE); -- 8 (độ dài mã mới nhất - cả chữ và số)
      SET @SUB_LASTEST_CODE_LEN = LENGTH(@SUB_LASTEST_CODE);  -- 3 (độ dài mã mới nhất- chỉ tính phần số)
      IF (@SUB_LASTEST_CODE = '0') THEN
        SET @SUB_LASTEST_CODE_LEN = 0; -- Nếu SUB_CODE là 0 chứng tỏ là mã mới nhất không kết thúc là số; SET =0 để tránh mất phần Prefix
      END IF;
      SET @PREFIX_CODE =  LEFT(@LASTEST_CODE,@LASTEST_CODE_LEN-@SUB_LASTEST_CODE_LEN); -- Lấy Prefix
    
      IF(@PREFIX_CODE IS NULL OR @PREFIX_CODE = '') THEN
        SET  @PREFIX_CODE = CONCAT(Func_GetPrefixNewCode(tableName),'-');
      END IF;

      SET @NEW_CODE = CONCAT(IFNULL(@PREFIX_CODE,''),@SUB_NEW_CODE); -- Gán phần prefix và giá trị của phần subfix;
      set @CodeDuplicate =  @NEW_CODE;
    
    
      WHILE @CodeDuplicate IS NOT NULL  DO 
        SET @SQLDupliCode = CONCAT('SET @CodeDuplicate = (SELECT e.',columnName,' FROM ',tableName,' e  WHERE ',columnName,' = "',@NEW_CODE,'" AND ',@WHERE_Organization,' LIMIT 1)');
        PREPARE query FROM @SQLDupliCode;
        EXECUTE query;
        DEALLOCATE PREPARE query; -- Set giá trị của CodeDuplicate, nếu nó null tức là không trùng nữa
        IF @CodeDuplicate IS NOT NULL THEN
          SET @SUB_NEW_CODE = (@SUB_NEW_CODE + 1); -- Tăng tiếp giá trị của subfix
          SET @NEW_CODE = CONCAT(IFNULL(@PREFIX_CODE,''),@SUB_NEW_CODE); -- Gán lại mã mới
        END IF;
      END WHILE;
 END IF;
  

  SELECT @NEW_CODE;
END
$$

--
-- Create procedure `Proc_GetNewCode`
--
CREATE PROCEDURE Proc_GetNewCode(IN TableName VARCHAR(255), IN p_OrganizationId CHAR(36))
BEGIN

   set @WHERE_Organization = '1=1';
--   IF p_OrganizationId IS NOT NULL THEN
--     set @WHERE_Organization = CONCAT('OrganizationId = "',p_OrganizationId,'"');
--   END IF;

  SET @LASTEST_CODE = '';
  SET @SQL = CONCAT('SELECT e.',TRIM(TableName),'Code INTO @LASTEST_CODE FROM ',TRIM(TableName),' e WHERE ',@WHERE_Organization,' ORDER BY e.CreatedDate DESC,e.',TRIM(TableName),'Code DESC LIMIT 1');
  PREPARE query FROM @SQL;
  EXECUTE query;
  DEALLOCATE PREPARE query;
 IF(@LASTEST_CODE IS NULL OR @LASTEST_CODE IS UNKNOWN OR @LASTEST_CODE = '') THEN
  SET @LASTEST_CODE = '0000';
 END IF;
  SET @SUB_LASTEST_CODE = (SELECT Func_GetSubfixIsNumber(@LASTEST_CODE)); -- 99
  SET @SUB_NEW_CODE = @SUB_LASTEST_CODE + 1; -- 100
  SET @LASTEST_CODE_LEN = LENGTH(@LASTEST_CODE); -- 8 (độ dài mã mới nhất - cả chữ và số)
  SET @SUB_LASTEST_CODE_LEN = LENGTH(@SUB_LASTEST_CODE);  -- 3 (độ dài mã mới nhất- chỉ tính phần số)
  IF (@SUB_LASTEST_CODE = '0') THEN
    SET @SUB_LASTEST_CODE_LEN = 0; -- Nếu SUB_CODE là 0 chứng tỏ là mã mới nhất không kết thúc là số; SET =0 để tránh mất phần Prefix
  END IF;
  SET @PREFIX_CODE =  LEFT(@LASTEST_CODE,@LASTEST_CODE_LEN-@SUB_LASTEST_CODE_LEN); -- Lấy Prefix

  IF(@PREFIX_CODE IS NULL OR @PREFIX_CODE = '') THEN
    SET  @PREFIX_CODE = CONCAT(Func_GetPrefixNewCode(TableName),'-');
  END IF;

  SET @NEW_CODE = CONCAT(@PREFIX_CODE,@SUB_NEW_CODE); -- Gán phần prefix và giá trị của phần subfix;
  set @CodeDuplicate =  @NEW_CODE;


  WHILE @CodeDuplicate IS NOT NULL  DO 
    SET @SQLDupliCode = CONCAT('SET @CodeDuplicate = (SELECT e.',TableName,'Code FROM ',TableName,' e  WHERE ',TableName,'Code = "',@NEW_CODE,'" AND ',@WHERE_Organization,' LIMIT 1)');
    PREPARE query FROM @SQLDupliCode;
    EXECUTE query;
    DEALLOCATE PREPARE query; -- Set giá trị của CodeDuplicate, nếu nó null tức là không trùng nữa
    IF @CodeDuplicate IS NOT NULL THEN
      SET @SUB_NEW_CODE = (@SUB_NEW_CODE + 1); -- Tăng tiếp giá trị của subfix
      SET @NEW_CODE = CONCAT(@PREFIX_CODE,@SUB_NEW_CODE); -- Gán lại mã mới
    END IF;
  END WHILE;

  SELECT @NEW_CODE;
END
$$

--
-- Create procedure `Proc_Employee_GetNewCode`
--
CREATE PROCEDURE Proc_Employee_GetNewCode()
BEGIN
  SET @LASTEST_CODE = (SELECT e.EmployeeCode FROM Employee e ORDER BY EmployeeCode DESC LIMIT 1); -- NV-00099
  SET @SUB_LASTEST_CODE = (SELECT Func_GetSubfixIsNumber(@LASTEST_CODE)); -- 99
  SET @SUB_NEW_CODE = @SUB_LASTEST_CODE + 1; -- 100
  SET @LASTEST_CODE_LEN = LENGTH(@LASTEST_CODE); -- 8 (độ dài mã mới nhất - cả chữ và số)
  SET @SUB_LASTEST_CODE_LEN = LENGTH(@SUB_LASTEST_CODE);  -- 3 (độ dài mã mới nhất- chỉ tính phần số)
  SET @PREFIX_CODE =  LEFT(@LASTEST_CODE,@LASTEST_CODE_LEN-@SUB_LASTEST_CODE_LEN); -- Lấy Prefix

  SET @NEW_CODE = CONCAT(@PREFIX_CODE,@SUB_NEW_CODE); -- Gán phần prefix và giá trị của phần subfix;
  set @CodeDuplicate =  (SELECT e.EmployeeCode FROM Employee e WHERE e.EmployeeCode = @NEW_CODE LIMIT 1);
  -- SELECT @CodeDuplicate;

  WHILE @CodeDuplicate IS NOT NULL DO 
    SET @SUB_NEW_CODE = (@SUB_NEW_CODE + 1); -- Tăng tiếp giá trị của subfix
    SET @NEW_CODE = CONCAT(@PREFIX_CODE,@SUB_NEW_CODE); -- Gán lại mã mới
    SET @CodeDuplicate = (SELECT e.EmployeeCode FROM Employee e WHERE e.EmployeeCode = @NEW_CODE LIMIT 1); -- Set giá trị của CodeDuplicate, nếu nó null tức là không trùng nữa
  END WHILE;

  SELECT @NEW_CODE;
END
$$

DELIMITER ;

--
-- Create table `WarehouseReceipt`
--
CREATE TABLE WarehouseReceipt (
  ReceiptId CHAR(36) NOT NULL DEFAULT '',
  ReceiptCode VARCHAR(20) NOT NULL DEFAULT '',
  ReceiptDate DATETIME NOT NULL COMMENT 'Ngày lập phiếu/ ngày nhập',
  SupplierId CHAR(36) DEFAULT NULL COMMENT 'Đơn vị cung cấp',
  EmployeeId CHAR(36) NOT NULL DEFAULT '' COMMENT 'Nhân viên làm việc',
  DelivererName VARCHAR(100) DEFAULT NULL COMMENT 'Tên người giao',
  DelivererPhone VARCHAR(50) DEFAULT NULL COMMENT 'Số điện thoại người giao',
  StockId CHAR(36) DEFAULT NULL COMMENT 'Kho nhập hàng',
  Note VARCHAR(255) DEFAULT NULL COMMENT 'Ghi chú',
  Address VARCHAR(255) DEFAULT NULL COMMENT 'Địa chỉ nhập hàng',
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (ReceiptId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Phiếu nhập kho';

--
-- Create table `UserTokenConfirm`
--
CREATE TABLE UserTokenConfirm (
  UserId CHAR(36) NOT NULL DEFAULT '',
  TokenCode VARCHAR(255) DEFAULT NULL,
  ExpireDate DATETIME DEFAULT NULL,
  UserName VARCHAR(255) DEFAULT NULL,
  Email VARCHAR(100) DEFAULT NULL,
  OrganizationId CHAR(36) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (UserId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `Supplier`
--
CREATE TABLE Supplier (
  SupplierId CHAR(36) NOT NULL DEFAULT '',
  SupplierCode VARCHAR(20) NOT NULL DEFAULT '',
  SupplierName VARCHAR(255) NOT NULL DEFAULT '',
  PhoneNumber VARCHAR(50) DEFAULT NULL,
  Email VARCHAR(100) DEFAULT NULL,
  Address VARCHAR(255) DEFAULT NULL,
  Description VARCHAR(255) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (SupplierId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Nhà cung cấp';

--
-- Create table `NavbarItem`
--
CREATE TABLE NavbarItem (
  NavbarItemId CHAR(36) NOT NULL,
  Label VARCHAR(255) DEFAULT NULL,
  Path VARCHAR(255) DEFAULT NULL,
  IconFont VARCHAR(255) DEFAULT NULL,
  IconCls VARCHAR(255) DEFAULT NULL,
  UseIconFont BIT(1) NOT NULL DEFAULT b'0',
  HasSub BIT(1) NOT NULL DEFAULT b'0',
  ParentId CHAR(36) DEFAULT NULL,
  Sort INT(11) DEFAULT NULL,
  Inactive BIT(1) DEFAULT NULL,
  OrganizationId CHAR(36) DEFAULT NULL,
  IsSystem BIT(1) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (NavbarItemId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `Distributor`
--
CREATE TABLE Distributor (
  DistributorId CHAR(36) NOT NULL,
  DistributorName VARCHAR(255) NOT NULL,
  PhoneNumber VARCHAR(50) NOT NULL,
  Address VARCHAR(255) DEFAULT NULL,
  ContactName VARCHAR(255) DEFAULT NULL COMMENT 'Người liên hệ',
  ContactPhoneNumber VARCHAR(50) DEFAULT NULL COMMENT 'Số điện thoại người liên hệ',
  TaxCode VARCHAR(50) DEFAULT NULL,
  Description VARCHAR(255) DEFAULT NULL,
  CreatedDate DATETIME DEFAULT NULL,
  CreatedBy VARCHAR(255) DEFAULT NULL,
  ModifiedDate DATETIME DEFAULT NULL,
  ModifiedBy VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (DistributorId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Nhà phân phối';

DELIMITER $$

--
-- Create procedure `Proc_Ref_GetDebitDetailByRefId`
--
CREATE PROCEDURE Proc_Ref_GetDebitDetailByRefId(IN p_organizationId CHAR(36), IN p_refId CHAR(36))
BEGIN
  SELECT v.* FROM View_DebitDetail v WHERE v.RefId = p_refId;
END
$$

--
-- Create procedure `Proc_Refs_GetRefsByRefTypePaging`
--
CREATE PROCEDURE Proc_Refs_GetRefsByRefTypePaging(IN p_organizationId CHAR(36), IN p_refType INT, IN p_limit INT, IN p_offset INT, IN p_keySearch VARCHAR(255), OUT p_totalRecords int)
BEGIN
  CREATE TEMPORARY TABLE IF NOT EXISTS tbRef AS
  SELECT ROW_NUMBER() OVER (ORDER BY r.RefDate DESC) AS Sort, r.* FROM Ref r
  WHERE (p_organizationId IS NULL AND (p_refType IS NULL OR r.RefType = p_refType)) 
  OR ((p_organizationId IS NOT NULL AND r.OrganizationId = p_organizationId) AND (p_refType IS NULL OR r.RefType = p_refType));

  SET p_totalRecords = (SELECT COUNT(*) FROM tbRef);
  SELECT * FROM tbRef r LIMIT p_limit OFFSET p_offset;
 
  DROP TEMPORARY TABLE IF EXISTS tbRef;
END
$$

--
-- Create procedure `Proc_Invoice_GetFilterPaging`
--
CREATE PROCEDURE Proc_Invoice_GetFilterPaging(IN p_OrgId CHAR(36), IN p_ColumnList VARCHAR(255), IN p_SortCondition VARCHAR(255), IN p_KeySearch VARCHAR(255), IN p_Limit INT, IN p_Offset INT, IN p_TableName VARCHAR(255))
BEGIN
--   set @orgId = '4b24c549-7e20-66b7-b073-961b5d5b8db8';
--   set @columnList = 'CreatedDate,InvoiceDate';
--   set @sortCondetion = 'DESC';
--   set @employeeCode = 'HD';
--   set @limit = 10;
--   set @offset = 5;
  SET p_TableName = 'Invoice';
  set @orgId = p_OrgId;
  set @columnList = p_ColumnList;
  set @p_SortCondition = p_SortCondition;
  set @p_KeySearch = p_KeySearch;
  set @limit = p_Limit;
  set @offset = p_Offset;
  
  SET @sql = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS tbInvoice AS 
                       SELECT ROW_NUMBER() OVER (ORDER BY ',@columnList,' ',@p_SortCondition,') AS RowIndex,i.* FROM ',p_TableName,' i 
                       WHERE OrganizationId = "',@orgId,'" AND InvoiceCode LIKE "%',@p_KeySearch,'%"',
                       ' LIMIT ',@limit,' OFFSET ',@offset,';');
  
  PREPARE query FROM @sql;
  EXECUTE query;
  DEALLOCATE PREPARE query;
  
  SELECT * FROM  tbInvoice;
  DROP TEMPORARY TABLE IF EXISTS tbInvoice;
END
$$

--
-- Create procedure `Proc_GetAllColumnOfTable`
--
CREATE PROCEDURE Proc_GetAllColumnOfTable(IN p_TableName VARCHAR(255), IN p_DbName VARCHAR(255))
BEGIN
select ordinal_position as ColumnId,
    column_name as ColumnName,
    data_type as ColumnDataType,
    case when numeric_precision is not null
              then numeric_precision
        else character_maximum_length end as MaxLength,
    case when datetime_precision is not null
              then datetime_precision
        when numeric_scale is not null
             then numeric_scale
        else 0 end as DataPrecision,
    is_nullable AS IsNullable,
    column_default AS ColumnDefault,
    table_schema AS DatabseName,
    COLUMN_KEY AS ColumnKey
from information_schema.columns
where table_name = p_TableName -- put table name here
and table_schema = p_DbName -- put schema name here
order by ordinal_position;
END
$$

DELIMITER ;

--
-- Enable foreign keys
--
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;